#!/bin/bash
MPDPASS="$(cat ~/.config/mpdpass)"
servername="gigabyte"
server="192.168.1.2"
mpdport="6600"
scriptname=$(realpath "$0")

lines=$(tput lines 2> /dev/null) || lines=$(tput -T xterm-256color lines)

export TERM=xterm-256color
editscript(){
  local script path; script="${scriptname##*/}"; path="${scriptname%/*}"; swp="$path/.$script.swp"
     if [[ ! -e "$swp" ]]; then printf "\n\n%s\n\n" "$swp"; (/usr/bin/nano "$scriptname"); exit
     else printf "\n%s is already being edited.\n%s exists; try fg or look in another window.\n" "$scriptname" "$swp"; exit;
  fi; }

pause(){ read -p "$*" ; }


confirm() {
    read -p "$1" -n 1 -r;
    echo;
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        return 0;
    else
        return 1;
    fi
}

remotefn() {
[[ "$(uname -n)" != "$servername" ]] && REMOTE="-h $server"
}


title(){
artist="$(mpc current -f %artist%)"
album="$(mpc current -f %album%)"
title="$(mpc current -f %title%)"
printf "\n\033[0mArtist: %s\nAlbum : %s\nTitle : %s\n" "$artist" "$album" "$title"

mpc current -f "%file%"|awk -F / -v OFS=/ '{$1="\033[1;33m" $1 "\033[0m"; $NF="\033[1;34m" $NF "\033[0m"; print}'

#mpc current -f "%title% on %album% by %artist%\n%file%"
printf '\n'
mpc queued -f "%file%"|awk -F / -v OFS=/ '{$1="Up next: \033[1;33m" $1 "\033[0m"; $NF="\033[1;34m" $NF "\033[0m"; print}'
printf '\n'
}

remotefn

echo

if [[ "$1" == @(edit|e|nano) ]]
  then
   editscript
elif [[ "$1" == -a ]] || [[ "$1" == -A ]]
    then
      query="${*:2}"
      printf 'Searching for "%s"...\n\n' "$query"
      readarray -t playlistarray < <(\mpc ${REMOTE:-} listall|grep -i --color=always "$query"|column --table -s "~" -o " | " -C name=\(POS\) -C name=file)
      n="${#playlistarray[@]}"
      printf 'Hits: %s\n' "$n"
      (( n == 0 )) && printf 'Exiting.\n' && exit 1
#      echo $(("$lines"-"$lines"/10-1))

      i=$(gum choose --header.bold "${playlistarray[@]:1:$n}" --cursor.italic --height=$(("$lines"-"$lines"/10-1)) --header="${playlistarray[0]}" --header.padding="0 2")

      selection="$i"; i="${i%%\)*}"; i="${i#*\(}"
      if $(pause "Play all matches Y/n? ")
        then
      readarray -t queuearray < <(mpc ${REMOTE:-} listall|grep -i --color=never "$query")
      start=$(($(mpc ${REMOTE:-} status %length%)+1))
      for i in "${queuearray[@]}"
        do
          mpc ${REMOTE:-} add "$i"
        done
      mpc ${REMOTE:-} play "$start"
      fi
elif [[ -n "$1" ]]
    then
      query="${*}"
<<<<<<< HEAD
      printf 'Searching for "%s"...\n' "$query"
      readarray -t playlistarray < <(\mpc ${REMOTE:-} playlist -f \(%position%\)~%file%|grep -i --color=always "$query"|column --table -s "~" -o " | " -C name=\(POS\) -C name=file)
=======
      printf 'Searching for "%s"...\n\n' "$query"
      readarray -t playlistarray < <(\mpc ${REMOTE:-} playlist -f \(%position%\)~%file%|
        grep -i --color=always "$query"|
        column --table -s "~" -o " | " -N \(POS\),file)
#        column --table -s "~" -o " | " -C name=\(POS\) -C name=file)

>>>>>>> e560171fc07c62bd77376fbe6df95bf55d6f570a
      n="${#playlistarray[@]}"
#      printf '$(("$lines"-"$lines"/10-1))=%s' "$(("$lines"-"$lines"/10-1))"
      printf 'Lines: %s; Hits: %s\n\n' "$(("$lines"-"$lines"/10-1))" "$n"
      (( n == 0 )) && printf 'Exiting.\n' && exit 1
      i=$(gum choose --header.bold "${playlistarray[@]:1:$n}" --cursor.italic --height=$(("$lines"-"$lines"/10-3)) --header="${playlistarray[0]}" --header.padding="0 2")
      selection="$i"; i="${i%%\)*}"; i="${i#*\(}"
      $(pause "Play $selection, Y/n? ") && \mpc ${REMOTE:-} play "$i"
#    else
#      \mpc ${REMOTE:-} playlist -f \(%position%\)~%file%|column --table -s "~" -o " | " -C name=\(POS\) -C name=Title
#   fi
else
  clear -x
<<<<<<< HEAD
#  mpc current -f "%file%\n%title% on %album% by %artist%" ; mpc queued -f "Up next: %file%"; mpc
  title
=======
  mpc ${REMOTE:-} current -f "%file%\n%title% on %album% by %artist%" ; mpc ${REMOTE:-} queued -f "Up next: %file%"; mpc ${REMOTE:-}
>>>>>>> e560171fc07c62bd77376fbe6df95bf55d6f570a
  lines=$(tput lines 2>&1 /dev/null) || lines=$(tput -T xterm-256color lines)
  readarray -t playlistarray < <(\mpc ${REMOTE:-} playlist -f \(%position%\)~%artist%~%album%~\(%track%\)~%title%~\(%time%\)|
      { printf '(-POS-)~Artist~Album~(#)~Title~(mm:ss)\n' ; \grep \($(\mpc ${REMOTE:-} current -f %position%)\) -m1 -C$(("$lines"/3)) ; } |
      column -s "~" -o " | " --table | \grep --color=always -e '' -e ".*$(mpc ${REMOTE:-} -f %position% current).*")
  n="${#playlistarray[@]}"
  printf 'Hits: %s\n' "$n"
  i=$(gum choose --header.bold "${playlistarray[@]:1:$n}" --cursor.italic --height=$(("$lines"/1)) --header="${playlistarray[0]}" --header.padding="0 2")
  i="${i%%)*}"
  i="${i#(}"
  mpc ${REMOTE:-} play "$i"
fi

exit


#[16:10:00] <iconoclast_hero> ok, last question.  when I ` ... | grep --color=always $(mpc -f %position% current) ` it only highlights the index (i.e., 26667 ATM)
#[16:10:19] <iconoclast_hero> can grep highlight the whole line or is that something I need to do/
#[16:10:59] <geirha> -e ".*$var.*"
#[16:12:07] <geirha> or  -e ".*$(mpc ...).*"  in your case. Don't omit the quotes


-f, --format
Configure the format used to display songs.

The metadata delimiters are:

Name	Description
%name%	A name for this song. This is not the song title. The exact meaning of this tag is not well-defined. It is often used by badly configured internet radio stations with broken tags to squeeze both the artist name and the song title in one tag.
%artist%	Artist file tag
%album%	Album file tag
%albumartist%	Album Artist file tag
%comment%	Comment file tag (not enabled by default in mpd.conf’s metadata_to_use)
%composer%	Composer file tag
%date%	Date file tag
%originaldate%	Original Date file tag
%disc%	Disc file tag
%genre%	Genre file tag
%performer%	Performer file tag
%title%	Title file tag
%track%	Track file tag
%time%	Duration of file
%file%	Path of file, relative to MPD’s music_directory variable
%position%	Queue track number
%id%	Queue track id number
%prio%	Priority in the (random) queue.
%mtime%	Date and time of last file modification
%mdate%	Date of last file modification

The [] operator is used to group output such that if no metadata delimiters are found or matched between [ and ], then none of the characters between [ and ] are output. & and | are logical operators for and and or. # is used to escape characters. Some useful examples for format are: “%file%” and “[[%artist% - ]%title%]|[%file%]”. This command also takes the following defined escape sequences:

\	backslash
\[	left bracket
\]	right bracket
\a	alert
\b	backspace
\e	escape
\t	tab
\n	newline
\v	vertical tab
\f	form-feed
\r	carriage return
If not given, the value of the environment variable MPC_FORMAT is used.



Usage:
 column [options] [<file>...]

Columnate lists.

Options:
 -t, --table                      create a table
 -n, --table-name <name>          table name for JSON output
 -O, --table-order <columns>      specify order of output columns
 -N, --table-columns <names>      comma separated columns names
 -l, --table-columns-limit <num>  maximal number of input columns
 -E, --table-noextreme <columns>  don't count long text from the columns to column width
 -d, --table-noheadings           don't print header
 -e, --table-header-repeat        repeat header for each page
 -H, --table-hide <columns>       don't print the columns
 -R, --table-right <columns>      right align text in these columns
 -T, --table-truncate <columns>   truncate text in the columns when necessary
 -W, --table-wrap <columns>       wrap text in the columns when necessary
 -L, --keep-empty-lines           don't ignore empty lines
 -J, --json                       use JSON output format for table

 -r, --tree <column>              column to use tree-like output for the table
 -i, --tree-id <column>           line ID to specify child-parent relation
 -p, --tree-parent <column>       parent to specify child-parent relation

 -c, --output-width <width>       width of output in number of characters
 -o, --output-separator <string>  columns separator for table output (default is two spaces)
 -s, --separator <string>         possible table delimiters
 -x, --fillrows                   fill rows before columns

 -h, --help                       display this help
 -V, --version                    display version

For more details see column(1).






[playing] #39671/57033   0:03/5:09 (0%)
volume: 25%   repeat: off   random: on    single: off   consume: on 


mpc status "\[%state\] #%songpos%/%length%    %currenttime%/%totaltime% (%percenttime%)\nvolume: %volume%  repeat: %repeat%"

       status [format] - Without an argument print a three line status
              output equivalent to "mpc" with no arguments. If a format string is given then the delimiters are processed exactly as how they are for metadata. See the '-f' option in Options

                                                                  ┌──────────────┬──────────────────────────────────────────────────────────────────────┐
                                                                  │Name          │ Description                                                          │
                                                                  ├──────────────┼──────────────────────────────────────────────────────────────────────┤
                                                                  │%totaltime%   │ The total duration of the song.                                      │
                                                                  ├──────────────┼──────────────────────────────────────────────────────────────────────┤
                                                                  │%currenttime% │ The time that the client is currently at.                            │
                                                                  ├──────────────┼──────────────────────────────────────────────────────────────────────┤
                                                                  │%percenttime% │ The percentage of time elapsed for the current song.                 │
                                                                  ├──────────────┼──────────────────────────────────────────────────────────────────────┤
                                                                  │%songpos%     │ The position of the current song within the playlist.                │
                                                                  ├──────────────┼──────────────────────────────────────────────────────────────────────┤
                                                                  │%length%      │ The number of songs within the playlist                              │
                                                                  ├──────────────┼──────────────────────────────────────────────────────────────────────┤
                                                                  │%state%       │ Either 'playing' or 'paused'                                         │
                                                                  ├──────────────┼──────────────────────────────────────────────────────────────────────┤
                                                                  │%volume%      │ The  current  volume  spaced out to 4 characters including a percent │
                                                                  │              │ sign                                                                 │
                                                                  ├──────────────┼──────────────────────────────────────────────────────────────────────┤
                                                                  │%random%      │ Current status of random mode. 'on' or 'off'                         │
                                                                  ├──────────────┼──────────────────────────────────────────────────────────────────────┤
                                                                  │%repeat%      │ Current status of repeat mode. 'on' or 'off'                         │
                                                                  ├──────────────┼──────────────────────────────────────────────────────────────────────┤
                                                                  │%single%      │ Current status of single mode. 'on', 'once', or 'off'                │
                                                                  ├──────────────┼──────────────────────────────────────────────────────────────────────┤
                                                                  │%consume%     │ Current status of consume mode. 'on' or 'off'                        │
                                                                  └──────────────┴──────────────────────────────────────────────────────────────────────┘
