#!/bin/bash

editscript(){
  scriptname=$(realpath "$0")
  local script path; script="${scriptname##*/}"; path="${scriptname%/*}"; swp="$path/.$script.swp"
     if [[ ! -e "$swp" ]]; then printf "\n\n%s\n\n" "$swp"; (/usr/bin/nano "$scriptname"); exit
     else printf "\n%s is already being edited.\n%s exists; try fg or look in another window.\n" "$scriptname" "$swp"; exit;
  fi; }

if [[ "$1" == @(edit|e|nano) ]]; then
  editscript; exit "$?"
fi

[[ "$XDG_CONFIG_HOME" ]] &&
    . "$XDG_CONFIG_HOME/mpd-local.conf" ||
    . /home/"$USER"/.config/mpd-local.conf ||
    . /etc/default/mpd-local.conf

#MPDPASS="$(cat ~/.config/mpdpass)"
#servername="gigabyte"
#mpdport="6600"
server="192.168.1.2"
red=$(tput setaf 1)
green=$(tput setaf 2)
yellow=$(tput setaf 3)
blue=$(tput setaf 4)
magenta=$(tput setaf 5)
cyan=$(tput setaf 6)
white=$(tput setaf 7)
bold="$(tput bold)"
tput0=$(tput sgr0) # reset color

lines=$(tput lines 2> /dev/null) || lines=$(tput -T xterm-256color lines)

export TERM=xterm-256color

pause(){ read -p "$*" ; }

searchfn(){
  local mpccommand="playlist"
  if [[ "$1" = listall ]]; then
    mpccommand="listall"
  elif [[ "$1" = current ]];
    mpccommand="current"
    currentpos="$(\mpc ${REMOTE:-} current -f %position%)"

  # Define colors using tput
  red=$(tput setaf 1)
  green=$(tput setaf 2)
  yellow=$(tput setaf 3)
  blue=$(tput setaf 4)
  magenta=$(tput setaf 5)
  cyan=$(tput setaf 6)
  white=$(tput setaf 7)
  bold="$(tput bold)"
  tput0=$(tput sgr0) # reset color

  # Read the playlist into an array
  readarray -t playlistarray < <(
    {
       if [[ "$mpccommand" = playlist ]]; then
          printf '(-pos-)~title~album artist~album~TT-DD~(mm:ss)~file\n'
         \mpc ${remote:-} ${mpccommand} -f \(%position%\)~%title%~%albumartist%~%album%~\(%disc%-%track%\)~\(%time%\)~%file%~%artist% | grep -i --color=never "$query"
     elif [[ "$mpccommand" = listall ]]; then
          printf '(-pos-)~title~album artist~album~TT-DD~(mm:ss)~file\n'
         \mpc ${remote:-} ${mpccommand} -f \(%position%\)~%title%~%albumartist%~%album%~\(%disc%-%track%\)~\(%time%\)~%file%~%artist% | grep -i --color=never "$query"
     elif [[ "$mpccommand" = current ]]; then
         \mpc ${REMOTE:-} playlist -f \(%position%\)~%title%~%albumartist%~%album%~\(%disc%-%track%\)~\(%time%\)~%file%~%artist%|
        { printf '  (-pos-)  ~title~albumartist~album~(dd-tt)~(mm:ss)~file\n' ; \grep -E --color=always ^\($(\mpc ${REMOTE:-} current -f %position%)\) -m1 -C400; }
#|
#     column -s "~" -o " | " --table | \grep --color=always -e '' -e ".*$(mpc ${REMOTE:-} -f %position% current).*"
       fi

    } |
    awk -F '~' -v red="$red" -v green="$green" -v cyan="$cyan" -v magenta="$magenta" -v yellow="$yellow" -v white="$white" -v blue="$blue" -v tput0="$tput0" -v bold="$bold" '
function reverse_path(path) {
    n = split(path, components, "/")
    reversed = components[n]
    for (i = n - 1; i >= 1; i--) {
        reversed = reversed "/" components[i]
    }
    return reversed
}
 function clean_artist(artist) {
        # Strip "with", "feat", and similar terms
        gsub(/ with .*| feat.*| ft.*/i, "", artist)
        return artist
    }
   {if (NR == 1) {
#     print $0;  # Print the header as is
      $1 = bold blue $1 tput0
      $2 = bold green (length($2) > 40 ? substr($2, 1, 38) "…" : $2) tput0
      $3 = bold cyan (length($3) > 30 ? substr($3, 1, 28) "…" : $3) tput0
      $4 = bold magenta (length($4) > 30 ? substr($4, 1, 28) "…" : $4)  tput0
      $5 = bold red $5 tput0
      $6 = bold yellow $6 tput0
      $7 = bold $7 tput0
      print $1 "~" $2 "~" $3 "~" $4 "~" $5 "~" $6 "~" $7
    } else {
            album_artist = $3
            primary_artist = $8

            if (album_artist == "Various Artists") {
                primary_artist = clean_artist(primary_artist)
            }

# Extract disc and track numbers -- this works with DD-TT
#    gsub(/[()]/,"",$5)
#    split($5, nums, "-")
#    disc = sprintf("%02d", nums[1])
#    track = sprintf("%02d", nums[2])

# Extract disc and track numbers -- this is supposed to add support for TTT - Artist -- Title.ext
    # Extract disc and track numbers
 gsub(/[()]/,"",$5)
    split($5, nums, "-")
    disc = sprintf("%02d", nums[1])
    track = (length(nums[length(nums)]) == 3) ? sprintf("%03d", nums[length(nums)]) : sprintf("%02d", nums[length(nums)])

      $1 = blue $1 tput0
#     $2 = green $2 tput0
      $2 = green (length($2) > 40 ? substr($2, 1, 38) "…" : $2) tput0
      $3 = cyan (length(primary_artist) > 30 ? substr(primary_artist, 1, 28) "…" : primary_artist) tput0
#     $3 = cyan (length($3) > 30 ? substr($3, 1, 28) "…" : $3) tput0
#     $3 = cyan $3 tput0
      $4 = magenta (length($4) > 30 ? substr($4, 1, 28) "…" : $4)  tput0
#     $5 = red $5 tput0
      $5 = red disc "-" track tput0
      $6 = yellow $6 tput0
      $7 = white $7 tput0
#     $7 = white reverse_path($7) tput0
      print $1 "~" $2 "~" $3 "~" $4 "~" $5 "~" $6 "~" $7
    }
   }' |
   column -t -s "~" -o " | "
 )
  argmax=1992844 #worked
  argmax=1993500 #fialed
  argmax=1993000

    n="${#playlistarray[@]}"
##    printf 'Hits: %s\n' "$n"

##   printf 'Lines: %s; Hits: %s\n\n' $((lines-lines/10-1)) "$n"
##   echo "$argmax argmax"
##   startsize="$(printf %s "${playlistarray[@]}"|wc -c)"
##   echo "$startsize startsize"
    if (( n > 7000 )); then
      printf '%sResults truncated, refine search futher.%s\n' "$red" "$white"
      truncatedarray=("${playlistarray[@]:0:5500}")
      totalbytes="$(printf %s "${truncatedarray[@]}"|wc -m)"
      for item in "${playlistarray[@]:5500}"; do
        item_bytes=${#item}
        if (( "$totalbytes" + item_bytes > argmax)); then
          break
        fi
        truncatedarray+=("$item")
        totalbytes=$((totalbytes + item_bytes))
      done
      playlistarray=("${truncatedarray[@]}")
    fi
    (( n == 0 )) && printf 'Exiting.\n' && exit 1
    totalbytes2="$(printf %s "${playlistarray[@]}"|wc -m)"

##  echo "$n original hits"
##  echo "${#playlistarray[@]} truncated hits"
##  echo "$argmax argmax"
      printf 'Hits: %s (%s)  -  ' "$n" "$mpccommand"
	      printf '%s/%s playlist array size\n' "$totalbytes2" "$argmax"

if [[ "$mpccommand" = playlist ]]; then
   i=$(gum choose --header.bold "${playlistarray[@]:1:$n}" --cursor.italic --height=$(( $(tput lines) - 14 )) --header="${playlistarray[0]}" --header.padding="0 2")
#  i=$(gum choose --header.bold "${playlistarray[@]:1:$n}" --cursor.italic --height=$(( $(tput lines) - $(tput lines)/10 )) --header="${playlistarray[0]}" --header.padding="0 2")
#  i=$(gum choose --header.bold "${playlistarray[@]:1:$n}" --cursor.italic --height=40 --header="${playlistarray[0]}" --header.padding="0 2")
elif [[ "$mpccommand" = current ]]; then
  timeout=$(( $(sex2sec $(\mpc status %totaltime%)) - $(sex2sec $(\mpc status %currenttime%)) ))
  i=$(gum choose --header.bold "${playlistarray[@]:1:$n}" --cursor.italic --height=$(( $(tput lines) - 14 )) --header="${playlistarray[0]}" --header.padding="0 2" --position=middle --timeout="${timeout}s" --selected=">>")
#  i=$(gum choose --position=middle --timeout="${timeout}s" --selected=">>" --header.bold "${playlistarray[@]:1:$n}" --cursor.italic --height=40 --header="${playlistarray[0]}" --header.padding="0 2")
fi
  (( n == 0 )) && printf 'Exiting.\n' && exit 1

  selection="$i"
  i="${i%%\)*}"
  i="${i#*\(}"

  $(pause "Play $selection, Y/n? ") && \mpc ${remote:-} play "$i"

}
##--> searchfn() <--###########################################################################

sex2sec(){
  local time="$1";
#  [[ ! "$time" =~ [[:digit:]]{2}:[[:digit:]]{2}:[[:digit:]]{2} ]] && time='00:00:00' #&& pause "${time@A}"
  [[ ! "$time" =~ [[:digit:]]{1,2}:[[:digit:]]{2} ]] && time='00:00' #&& pause "${time@A}"
#  local hours=$(echo "$time" | awk -F: '{print $1}'); # pause "$hours"
  local minutes=$(echo "$time" | awk -F: '{print $1}'); # pause "$minutes"
  local seconds=$(echo "$time" | awk -F: '{print $2}'); # pause "$seconds"
  local total_seconds=$(( ( 10#$minutes * 60) + 10#$seconds ));
# pause "no sec $(local total_seconds=$(( (10#$hours * 3600) + (10#$minutes * 60) )) )"
#  pause "no min $(local total_seconds=$(( (10#$hours * 3600) + (10#$seconds) )) )"
#  pause "no hours $(local total_seconds=$(( (10#$minutes * 60) + (10#$seconds) )) )"
  echo "$total_seconds" ;  }
##--> sexagesimal_to_sec() <--##################################################################


searchfn_backup(){
  red="$(tput setaf 1)"
  green='\033[0;32m'
  yellow='\033[0;33m'
  blue='\033[0;34m'
  magenta='\033[0;35m'
  cyan='\033[0;36m'
  white='\033[0m' # No Color

      readarray -t playlistarray < <(\mpc ${REMOTE:-} playlist -f \(%position%\)~%artist%~%album%~\(%track%\)~%title%~\(%time%\)|grep -i --color=always "$query"|
         { printf '%s(-POS-)~%sArtist~%sAlbum~%s(%s#%s)~%sTitle%s~(mm:ss)\n' "${blue}" "${green}" "${cyan}" "${white}" "${magenta}" "${white}" "${yellow}" "${white}"; \grep \($(\mpc ${REMOTE:-} current -f %position%)\) -m1 -C$(("$lines"/3)) ; } |
         column -s "~" -o " | " --table | \grep --color=always -e '' -e ".*$(mpc ${REMOTE:-} -f %position% current).*")
      n="${#playlistarray[@]}"
      printf 'Hits: %s\n' "$n"

#      printf '$((lines-lines/10-1))=%s' $((lines-lines/10-1))
      printf 'Lines: %s; Hits: %s\n\n' $((lines-lines/10-1)) "$n"
#     i=$(gum choose --header.bold "${playlistarray[@]:1:$n}" --cursor.italic --height=$(("$lines"/1)) --header="${playlistarray[0]}" --header.padding="0 2")
pause "${playlistarray[@]}"
      i=$(gum choose --header.bold "${playlistarray[@]:1:$n}" --cursor.italic --height=40 --header="${playlistarray[0]}" --header.padding="0 2")
      (( n == 0 )) && printf 'Exiting.\n' && exit 1
      selection="$i"; i="${i%%\)*}"; i="${i#*\(}"
      $(pause "Play $selection, Y/n? ") && \mpc ${REMOTE:-} play "$i"
}
##--> searchfn_backup() <--##################################################################

confirm() {
    read -p "$1" -n 1 -r;
    echo;
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        return 0;
    else
        return 1;
    fi
}

remotefn() {
  [[ "$(uname -n)" != "$servername" ]] && REMOTE="-h $server"
}


title(){
  artist="$(mpc current -f %artist%)"
  album="$(mpc current -f %album%)"
  title="$(mpc current -f %title%)"
  printf "\n\033[0mArtist: %s\nAlbum : %s\nTitle : %s\n" "$artist" "$album" "$title"
  mpc current -f "%file%"|awk -F / -v OFS=/ '{$1="\033[1;33m" $1 "\033[0m"; $NF="\033[1;34m" $NF "\033[0m"; print}'
# mpc current -f "%title% on %album% by %artist%\n%file%"
  printf '\n'
  mpc queued -f "%file%"|awk -F / -v OFS=/ '{$1="Up next: \033[1;33m" $1 "\033[0m"; $NF="\033[1;34m" $NF "\033[0m"; print}'
  printf '\n'
}

reverse_path() {
  local path="$1"
  echo "$path" | awk -F'/' '{for(i=NF; i>1; i--) printf("%s/", $i); printf("%s\n", $1)}'
}

remotefn

echo

cline=150
if [[ "$1" = -n ]]; then
 cline="$2"
fi

if [[ "$1" = -a ]] || [[ "$1" = -A ]]; then
  argmax=1995090 #works
  argmax=1995121 #fails
  argmax=1995120
  query="${*:2}"
#  if [[ "$query" ]]; then
    printf 'Searching for "%s"...\n\n' "$query"
    readarray -t playlistarray < <(
      {
#   { printf '(-pos-)~title~album artist~album~TT-DD~(mm:ss)\n'; \mpc ${REMOTE:-} listall|grep -i --color=always "$query"|column --table -s "~" -o " | " ; } )
         printf '(-pos-)~title~album artist~album~TT-DD~(mm:ss)~file\n'
         \mpc ${remote:-} listall -f \(%position%\)~%title%~%albumartist%~%album%~\(%disc%-%track%\)~\(%time%\)~%file%~%artist% | grep -i --color=never "$query"
       } |
    awk -F '~' -v red="$red" -v green="$green" -v cyan="$cyan" -v magenta="$magenta" -v yellow="$yellow" -v white="$white" -v blue="$blue" -v tput0="$tput0" -v bold="$bold" '
 function reverse_path(path) {
    n = split(path, components, "/")
    reversed = components[n]
    for (i = n - 1; i >= 1; i--) {
        reversed = reversed "/" components[i]
    }
    return reversed
   }
 function clean_artist(artist) {
        # Strip "with", "feat", and similar terms
        gsub(/ with .*| feat.*| ft.*/i, "", artist)
        return artist
   }
   {if (NR == 1) {
#     print $0;  # Print the header as is
      $1 = bold blue $1 tput0
#     $2 = bold green $2 tput0
      $2 = bold green (length($2) > 40 ? substr($2, 1, 38) "…" : $2) tput0
      $3 = bold cyan (length($3) > 30 ? substr($3, 1, 28) "…" : $3) tput0
#     $3 = bold cyan $3 tput0
      $4 = bold magenta (length($4) > 30 ? substr($4, 1, 28) "…" : $4)  tput0
      $5 = bold red $5 tput0
#     $5 = bold red disc "-" track tput0
      $6 = bold yellow $6 tput0
      $7 = bold $7 tput0
      print $1 "~" $2 "~" $3 "~" $4 "~" $5 "~" $6 "~" $7
    } else {
            album_artist = $3
            primary_artist = $8

            if (album_artist == "Various Artists") {
                primary_artist = clean_artist(primary_artist)
            }

# Extract disc and track numbers -- this works with DD-TT
#    gsub(/[()]/,"",$5)
#    split($5, nums, "-")
#    disc = sprintf("%02d", nums[1])
#    track = sprintf("%02d", nums[2])

# Extract disc and track numbers -- this is supposed to add support for TTT - Artist -- Title.ext
      gsub(/[()]/,"",$5)
      split($5, nums, "-")
      disc = sprintf("%02d", nums[1])
      track = (length(nums[length(nums)]) == 3) ? sprintf("%03d", nums[length(nums)]) : sprintf("%02d", nums[length(nums)])

      $1 = blue $1 tput0
#     $2 = green $2 tput0
      $2 = green (length($2) > 40 ? substr($2, 1, 38) "…" : $2) tput0
      $3 = cyan (length(primary_artist) > 30 ? substr(primary_artist, 1, 28) "…" : primary_artist) tput0
#     $3 = cyan (length($3) > 30 ? substr($3, 1, 28) "…" : $3) tput0
#     $3 = cyan $3 tput0
      $4 = magenta (length($4) > 30 ? substr($4, 1, 28) "…" : $4)  tput0
#     $5 = red $5 tput0
      $5 = red disc "-" track tput0
      $6 = yellow $6 tput0
      $7 = white $7 tput0
 #     $7 = white reverse_path($7) tput0

      print $1 "~" $2 "~" $3 "~" $4 "~" $5 "~" $6 "~" $7
    }
   }' |
   column -t -s "~" -o " | "
 )
    n="${#playlistarray[@]}"
    printf 'Hits: %s\n' "$n"
    echo "$argmax argmax"
    startsize="$(printf %s "${playlistarray[@]}"|wc -c)"
    echo "$startsize startsize"
    if (( n > 7000 )); then
      printf '%sResults truncated, refine search futher.%s\n' "$red" "$white"
      truncatedarray=("${playlistarray[@]:0:5500}")
      totalbytes="$(printf %s "${truncatedarray[@]}"|wc -m)"
      for item in "${playlistarray[@]:5500}"; do
        item_bytes=${#item}
        if (( "$totalbytes" + item_bytes > argmax)); then
          break
        fi
        truncatedarray+=("$item")
        totalbytes=$((totalbytes + item_bytes))
      done
      playlistarray=("${truncatedarray[@]}")
    fi
    (( n == 0 )) && printf 'Exiting.\n' && exit 1
      totalbytes2="$(printf %s "${playlistarray[@]}"|wc -m)"
    echo "${#playlistarray[@]}/$n current/original hits"
    echo "$argmax argmax"
    echo "$totalbytes2 playlist array size"
#    i=$(gum choose --header.bold "${playlistarray[@]:1:$n}" --cursor.italic --height=$(("$lines"-"$lines"/10-1)) --header="${playlistarray[0]}" --header.padding="0 2") || exit 1
    i=$(gum choose --header.bold "${playlistarray[@]:1:$n}" --cursor.italic --height="$lines" --header="${playlistarray[0]}" --header.padding="0 2") || exit 1
    selection="$i"; i="${i%%\)*}"; i="${i#*\(}"
    if $(pause "Play all matches Y/n? "); then
      readarray -t queuearray < <(mpc ${REMOTE:-} listall|grep -i --color=never "$query")
      start=$(($(mpc ${REMOTE:-} status %length%)+1))
      for i in "${queuearray[@]}"; do
        mpc ${REMOTE:-} add "$i"
      done
      mpc ${REMOTE:-} play "$start"
    fi
#  else
#    echo "No query provided; mpc listall is inappropriate here without query ... "
#    echo
#    exit 1
#  fi


elif [[ -n "$1" ]]; then
  query="${*}"
  clear -x
  title
#      readarray -t playlistarray < <(\mpc ${REMOTE:-} playlist -f \(%position%\)~%file%|
#        grep -i --color=always "$query"|
#        column --table -s "~" -o " | " -N \(POS\),file)
#      n="${#playlistarray[@]}"

#      i=$(gum choose --header.bold "${playlistarray[@]:1:$n}" --cursor.italic --height=$(("$lines"-"$lines"/10-3)) --header="${playlistarray[0]}" --header.padding="0 2")
  searchfn
else
  clear -x
  title
  searchfn current
###  readarray -t playlistarray < <(
###    \mpc ${REMOTE:-} playlist -f \(%position%\)~%artist%~%album%~\(%track%\)~%title%~\(%time%\)|
###    {
###      printf '(-POS-)~Artist~Album~(#)~Title~(mm:ss)\n'
###      \grep \($(\mpc ${REMOTE:-} current -f %position%)\) -m1 -C$(("$lines"/3)) ;
###    } |
###     column -s "~" -o " | " --table | \grep --color=always -e '' -e ".*$(mpc ${REMOTE:-} -f %position% current).*"
###    )
###
###  n="${#playlistarray[@]}"
###  printf 'Hits: %s\n' "$n"
#### i=$(gum choose --header.bold "${playlistarray[@]:1:$n}" --cursor.italic --height=$(("$lines"/1)) --header="${playlistarray[0]}" --header.padding="0 2")
####  i=$(gum choose --header.bold "${playlistarray[@]:1:$n}" --cursor.italic --height=40 --header="${playlistarray[0]}" --header.padding="0 2")
###  i=$(gum choose --position=150 --header.bold "${playlistarray[@]:1:$n}" --cursor.italic --height=40 --header="${playlistarray[0]}" --header.padding="0 2")
###  i="${i%%)*}"
###  i="${i#(}"
###  mpc ${REMOTE:-} play "$i"

fi

exit


#[16:10:00] <iconoclast_hero> ok, last question.  when I ` ... | grep --color=always $(mpc -f %position% current) ` it only highlights the index (i.e., 26667 ATM)
#[16:10:19] <iconoclast_hero> can grep highlight the whole line or is that something I need to do/
#[16:10:59] <geirha> -e ".*$var.*"
#[16:12:07] <geirha> or  -e ".*$(mpc ...).*"  in your case. Don't omit the quotes


-f, --format
Configure the format used to display songs.

The metadata delimiters are:

Name	Description
%name%	A name for this song. This is not the song title. The exact meaning of this tag is not well-defined. It is often used by badly configured internet radio stations with broken tags to squeeze both the artist name and the song title in one tag.
%artist%	Artist file tag
%album%	Album file tag
%albumartist%	Album Artist file tag
%comment%	Comment file tag (not enabled by default in mpd.conf’s metadata_to_use)
%composer%	Composer file tag
%date%	Date file tag
%originaldate%	Original Date file tag
%disc%	Disc file tag
%genre%	Genre file tag
%performer%	Performer file tag
%title%	Title file tag
%track%	Track file tag
%time%	Duration of file
%file%	Path of file, relative to MPD’s music_directory variable
%position%	Queue track number
%id%	Queue track id number
%prio%	Priority in the (random) queue.
%mtime%	Date and time of last file modification
%mdate%	Date of last file modification

The [] operator is used to group output such that if no metadata delimiters are found or matched between [ and ], then none of the characters between [ and ] are output. & and | are logical operators for and and or. # is used to escape characters. Some useful examples for format are: “%file%” and “[[%artist% - ]%title%]|[%file%]”. This command also takes the following defined escape sequences:

\	backslash
\[	left bracket
\]	right bracket
\a	alert
\b	backspace
\e	escape
\t	tab
\n	newline
\v	vertical tab
\f	form-feed
\r	carriage return
If not given, the value of the environment variable MPC_FORMAT is used.



Usage:
 column [options] [<file>...]

Columnate lists.

Options:
 -t, --table                      create a table
 -n, --table-name <name>          table name for JSON output
 -O, --table-order <columns>      specify order of output columns
 -N, --table-columns <names>      comma separated columns names
 -l, --table-columns-limit <num>  maximal number of input columns
 -E, --table-noextreme <columns>  don't count long text from the columns to column width
 -d, --table-noheadings           don't print header
 -e, --table-header-repeat        repeat header for each page
 -H, --table-hide <columns>       don't print the columns
 -R, --table-right <columns>      right align text in these columns
 -T, --table-truncate <columns>   truncate text in the columns when necessary
 -W, --table-wrap <columns>       wrap text in the columns when necessary
 -L, --keep-empty-lines           don't ignore empty lines
 -J, --json                       use JSON output format for table

 -r, --tree <column>              column to use tree-like output for the table
 -i, --tree-id <column>           line ID to specify child-parent relation
 -p, --tree-parent <column>       parent to specify child-parent relation

 -c, --output-width <width>       width of output in number of characters
 -o, --output-separator <string>  columns separator for table output (default is two spaces)
 -s, --separator <string>         possible table delimiters
 -x, --fillrows                   fill rows before columns

 -h, --help                       display this help
 -V, --version                    display version

For more details see column(1).






[playing] #39671/57033   0:03/5:09 (0%)
volume: 25%   repeat: off   random: on    single: off   consume: on 


mpc status "\[%state\] #%songpos%/%length%    %currenttime%/%totaltime% (%percenttime%)\nvolume: %volume%  repeat: %repeat%"

       status [format] - Without an argument print a three line status
              output equivalent to "mpc" with no arguments. If a format string is given then the delimiters are processed exactly as how they are for metadata. See the '-f' option in Options

                                                                  ┌──────────────┬──────────────────────────────────────────────────────────────────────┐
                                                                  │Name          │ Description                                                          │
                                                                  ├──────────────┼──────────────────────────────────────────────────────────────────────┤
                                                                  │%totaltime%   │ The total duration of the song.                                      │
                                                                  ├──────────────┼──────────────────────────────────────────────────────────────────────┤
                                                                  │%currenttime% │ The time that the client is currently at.                            │
                                                                  ├──────────────┼──────────────────────────────────────────────────────────────────────┤
                                                                  │%percenttime% │ The percentage of time elapsed for the current song.                 │
                                                                  ├──────────────┼──────────────────────────────────────────────────────────────────────┤
                                                                  │%songpos%     │ The position of the current song within the playlist.                │
                                                                  ├──────────────┼──────────────────────────────────────────────────────────────────────┤
                                                                  │%length%      │ The number of songs within the playlist                              │
                                                                  ├──────────────┼──────────────────────────────────────────────────────────────────────┤
                                                                  │%state%       │ Either 'playing' or 'paused'                                         │
                                                                  ├──────────────┼──────────────────────────────────────────────────────────────────────┤
                                                                  │%volume%      │ The  current  volume  spaced out to 4 characters including a percent │
                                                                  │              │ sign                                                                 │
                                                                  ├──────────────┼──────────────────────────────────────────────────────────────────────┤
                                                                  │%random%      │ Current status of random mode. 'on' or 'off'                         │
                                                                  ├──────────────┼──────────────────────────────────────────────────────────────────────┤
                                                                  │%repeat%      │ Current status of repeat mode. 'on' or 'off'                         │
                                                                  ├──────────────┼──────────────────────────────────────────────────────────────────────┤
                                                                  │%single%      │ Current status of single mode. 'on', 'once', or 'off'                │
                                                                  ├──────────────┼──────────────────────────────────────────────────────────────────────┤
                                                                  │%consume%     │ Current status of consume mode. 'on' or 'off'                        │
                                                                  └──────────────┴──────────────────────────────────────────────────────────────────────┘




                        Name             Description
                              ────────────────────────────────────────────────────────
                                %name%           A name for this song.  This is  not
                                                 the  song  title. The exact meaning
                                                 of this tag is not well-defined. It
                                                 is often used by  badly  configured
                                                 internet radio stations with broken
                                                 tags  to  squeeze  both  the artist
                                                 name and the song title in one tag.
                              ────────────────────────────────────────────────────────
                                %artist%         Artist file tag
                              ────────────────────────────────────────────────────────
                                %album%          Album file tag
                              ────────────────────────────────────────────────────────
                                %albumartist%    Album Artist file tag
                              ────────────────────────────────────────────────────────
                                %comment%        Comment file tag  (not  enabled  by
                                                 default    in    mpd.conf's   meta‐
                                                 data_to_use)
                              ────────────────────────────────────────────────────────
                                %composer%       Composer file tag
                              ────────────────────────────────────────────────────────
                                %date%           Date file tag
                              ────────────────────────────────────────────────────────
                                %originaldate%   Original Date file tag
                              ────────────────────────────────────────────────────────
                                %disc%           Disc file tag
                              ────────────────────────────────────────────────────────
                                %genre%          Genre file tag
                              ────────────────────────────────────────────────────────
                                %performer%      Performer file tag
                              ────────────────────────────────────────────────────────
                                %title%          Title file tag
                              ────────────────────────────────────────────────────────
                                %track%          Track file tag
                              ────────────────────────────────────────────────────────
                                %time%           Duration of file
                              ────────────────────────────────────────────────────────
                                %file%           Path of file, relative to MPD's mu‐
                                                 sic_directory variable
                              ────────────────────────────────────────────────────────
                                %position%       Queue track number
                              ────────────────────────────────────────────────────────
                                %id%             Queue track id number
                              ────────────────────────────────────────────────────────
                                %prio%           Priority in the (random) queue.
                              ────────────────────────────────────────────────────────
                                %mtime%          Date and time of last file  modifi‐
                                                 cation
                              ────────────────────────────────────────────────────────
                                %mdate%          Date of last file modification
                              ────────────────────────────────────────────────────────
                                %audioformat%    The audio format of the song.
