#!/bin/bash
printf '%s has started.\n' "$0"

pidfile='/tmp/mpdlinger.pid'

[[ -f "$pidfile" ]] && mpdlingerpid="$(< "$pidfile")"

startupcheck(){

readarray -t pids < <(pgrep mpdlinger)
for i in "${!pids[@]}"; do
  [[ "$(ps -p "${pids[i]}" -o command --no-header)" = *\ --edit* ]] && unset 'pids[i]'
done
pids=("${pids[@]}")

if (( mpdlingerpid )) && ps -p "$mpdlingerpid" >/dev/null && screenpid="$(screen -ls|\grep -m1 mpdlinger)"; then
  printf '\nAn instance of mpdlinger is already running in a screen process:\n%s\n' "$screenpid"
  printf '\nAttempting to resume screen...\n\n'
  exec screen -r "$(awk '{print $1}' <<< "$screenpid")"
  exit 0
elif (( mpdlingerpid )) && ps -p "$mpdlingerpid" >/dev/null; then
  [[ "$(ps -o stat= -p "$mpdlingerpid")" = "S" ]] && background=1
  printf 'An instance of mpdlinger is already running (not in a named screen process):\n'
  ! (( background )) &&  printf 'You will need to chase it down in another window or kill it (pid=%s).\nExiting (exit 1)\n.' "$mpdlingerpid"
  (( background )) && printf 'You will need to chase it down somewhere in the background or kill it (pid=%s).\nExiting (exit 1)\n.' "$mpdlingerpid"
  exit 1
elif (( "${#pids[@]}" > 1 )); then
  printf 'There is more than once instance of mpdlinger running:\n'
  read -rp "$(pgrep mpdlinger -a)"
else
  mpdlingerpid="$$"
  echo "$mpdlingerpid" > "$pidfile"
fi
}

[[ "$@" != @(*next*|--edit|*--exec*) ]] && startupcheck

#// signal traps
trap sigint SIGINT
#trap 'echo usr1; [[ $newcount ]] && count=$newcount && echo "Count updated to: $count"' USR1
trap 'newcount=$(< /tmp/mpdlinger) && count=$newcount && echo "Count updated to: $count"' USR1
trap 'exec mpdlinger' USR2
trap "exec mpdlinger $limit" USR2
#//

#sourcefn /usr/local/bin/mpdignore.functions hr2
. mpdignore.functions

pauseloop(){
  pauseout(){
    . <(mpd-current.py)
    printf '%s\n%s \n%s \n%s \n \n%s\n ' \
           "$(toilet -tf "$font1" "$1")" \
           "$(toilet -tf "$font1" "$artist / $title")" \
           "$(toilet -tf "$font1" "$album:")" \
           "$(toilet -tf "$font1" "$count/$limit")" \
           "$(mpctitle)" |
      "${lolargs[@]}"&
  }

  if [[ "$1" = --out ]]; then
    clear -x
    mpcp -q random off
    pauseout 'mpdlinger will pause changing artists...'
  elif [[ "$1" = --in ]]; then
    toilet -tf "$font1" "Resuming rock blocks! $limit in a row!"|"${lolargs[@]}"
    sleep 2
    paused=false
    exec mpdlinger -c"$count" --off "$limit"
  else
    while output=( $(\mpc idle playlist player) ) && "$paused"; do
      if [[ "${output[@]}" = playlist\ player ]]; then
        clear -x
        ((count++))
        pauseout 'Paused...'
      fi
    done
  fi
}
##--> pauseloop() <--###########################################################################

sigint(){
  # Kill only child processes in the same process group
  pgid=$(ps -o pgid= -p $$ | tr -d ' ')
  pkill -g "$pgid" lolcat
#  printf \\b\\b%s\\n . . .
  printf '\r\033[K'
  if "$paused"; then
    pauseloop --in
  else
    mainmenu
  fi
}
##--> sigint() <--###############################################################################

mainmenu(){
  while true; do
    option=$(gum choose \
      --header="Multi-level Menu" \
      --height=10 \
      --item.foreground="33" \
      --cursor.foreground=214 \
      "Next block" \
      "Skip" \
      "Playlist" \
      "Change limit" \
      "Pause" \
      "Quit")

    case $option in
      "Next block")
        mpcp -q random on
        next >/dev/null
        mpcp -q random off
        exec mpdlinger
        ;;
      "Skip")
        skipsong
        ;;
      "Playlist")
        playlistmenu
        ;;
      "Change limit")
        changelimit
        ;;
      "Pause")
        pauseloop --out
        exec mpdlinger -p -c"$count" "$limit"
        ;;
      "Quit")
        cleanupexit
        ;;
      "")
        exec mpdlinger -c"$count" "$limit"
        ;;
      *)
        echo "Invalid option."
        ;;
    esac
  done
}
##--> mainmenu() <--############################################################################


skipsong(){
  echo "Skipping song..."
## shouldn't this be (( count < limit )) ??

##  if (( count < 4 )); then
  if (( count < limit )); then
    next >/dev/null
    startcount=$(( count + 1 ))
  else
    mpcp -q random on
    next >/dev/null
    mpcp -q random off
    startcount=1
  fi
  exec mpdlinger --exec -c"$startcount"
}

##--> skipsong() <--#############################################################################


showhelp(){
  cat <<EOF
Usage: $0 [options]

Options:
  -p              Pause the process.
  --off, --on     Initialize with a random value, setting the state to 'off' or 'on'.
  -c <number>     Set the count to the specified number. If no argument is provided after -c, the script expects a numeric value.
  next            Move to the next block of operations.
  <number>        Set a limit to the specified numeric value.

Description:
  - The -p flag pauses the process.
  - The --off or --on flags initialize a random state.
  - The -c flag sets the count to the specified number. If -c is used without an argument, the next argument must be a number.
  - The 'next' option advances to the next block.
  - A numeric value after the command sets a limit.

Error:
  - If -c is used without a valid number, an error message is displayed.

Examples:
  $0 -p                 # Pauses the process.
  $0 --on               # Initializes with the 'on' state.
  $0 -c 5               # Sets the count to 5.
  $0 next               # Moves to the next block.
  $0 10                 # Sets the limit to 10.
EOF
}
##--> showhelp() <--############################################################################


playlistmenu(){
  while true; do
    suboption=$(gum choose \
      --header="Playlist Menu" \
      --height=8 \
      --item.foreground="33" \
      --cursor.foreground=214 \
      "Current position" \
      "Search" \
      "Back")

    case "$suboption" in
      "Current position")
        playlist
        exec mpdlinger
        ;;
      "Search")
        searchplaylist
        ;;
      ""|"Back")
        return  # Go back to the main menu
        ;;
      *)
        echo "Invalid option."
        ;;
    esac
  done
}
##--> playlistmenu() <--#######################################################################

searchplaylist(){
  term="$(gum input --placeholder=" Search term..." --prompt "Search playlist: " --cursor.foreground=214 --header.foreground=33 --prompt.foreground=33)"
  subsubopt=$(gum choose \
    --header="Search Options" \
    --height=6 \
    --item.foreground="33" \
    --cursor.foreground=214 \
    "Current playlist" \
    "Entire library" \
    "Back")

  case "$subsubopt" in
    "Current playlist")
      playlist "$term"
      exec mpdlinger
      ;;
    "Entire library")
      playlist -A "$term"
      exec mpdlinger
      ;;
    ""|"Back")
      return  # Go back to the previous menu
      ;;
    *)
      echo "Invalid option."
      ;;
  esac
}
##--> searchplaylist() <--#######################################################################

changelimit(){
  read -p "Enter new limit: " limit
  echo "Limit changed to $limit"
  exec mpdlinger --exec -c"$count" "$limit"
}
##--> changelimit() <--#######################################################################

cleanupexit(){
  echo "Exiting..."
  rm /tmp/mpdlinger "$pidfile" 2>/dev/null
  mpcp random on | grep --color=always -B2 'random\:\ on'
  exit 130
}
##--> cleanupexit() <--#######################################################################

getpids(){
#  pids=( $(ps aux | grep '[m]pdlinger' |grep -Ev nano\|mpdlinger\ e | awk '{print $2}') )
  readarray -t pids < <(pgrep mpdlinger)
  for i in "${!pids[@]}"; do
    [[ "$(ps -p "${pids[i]}" -o command --no-header)" = *\ --edit* ]] && unset 'pids[i]'
  done
  pids=("${pids[@]}")

  pgid=$(ps -o pgid= -p $$ | tr -d ' ')

## I don't think this is doing anything in this script.
## 1. otherpids isn't being used anywhere
## 2. what it appears to be doing won't work since it's looking for mpdlinger being edited... which I'm doing above
## 3. the pgrep command above doesn't pull up the screen job with mpdlinger in it.

  readarray -t otherpids < <(pgrep mpdlinger| \grep -v -E "^$$|^$(pgrep -P $$)|mpdlinger e") #`|mpdlinger e` is probably unnecessary
}
##--> getpids() <--############################################################################


nextblock(){
#  local pid=( $(ps aux|grep '[m]pdlinger'|grep -Ev nano\|mpdlinger\ e|awk '{print $2}') )
  getpids
  mpcp -q random on
#  kill -USR2 "$pid"
  read -rp "pids[0]: ${pids[0]}; mpdlingerpid: $mpdlingerpid"
  kill -USR2 "${pids[0]}" # not sure what this is doing, it's kicking an error, probably becuase there's no pid anymore since i used exec for what needed killing?
  mpcp -q next
  mpcp -q random off
  exit
}
##--> nextblock() <--#######################################################################



#═══════▶ MAIN CODE ◀════════════════════════════════════════════════════════
#fonts are in /usr/share/figlet
font1=future
font2=pagga
font2="$font1"
#filter=metal

[[ "$STY" ]] && unset COLORTERM
lolargs=(lolcat)
[[ "$STY" ]] && lolargs+=(-ap 2) || lolargs+=(-tap 2)
lolargs+=(-F 0.075)
#lolargs+=(-d 08)
#lolargs+=(-s 15)
lolargs+=(-d 06)
lolargs+=(-s 13)


unset initrand
paused=false
limit=4
unset current
count=1
getpids
#//


#// is another copy running?
  (( "${#pids[@]}" > 2 )) &&
  ! [[ "$*" =~ \-s\ ?[[:digit:]]+ || "$*" =~ (^|[[:space:]])'next'([[:space:]]|$) ]] &&
  { echo "Another instance of mpdlinger is running, please investigate"; exit 1; }
#//


while [[ "$#" -gt 0 ]]; do
  if [[ "$1" = @(-s|--screen@(|ed)) ]]; then
    screenname="mpdlinger-$(date -Im)"
    shift
    break
 elif [[ "$1" = -p ]]; then
    args+=("$1")
    paused=true
    shift
  elif [[ "$1" = @(|-|--)?(h|elp) ]]; then
    showhelp
    exit 0
  elif [[ "$1" =~ (--off|--on) ]]; then
    args+=("$1")
    initrand="${1#--}"
    shift
  elif [[ "$1" =~ ^-c[0-9]+$ || "$1" = "-c" ]]; then
    (( "${#pids[@]}" > 2 )) && targetpid="${pids[0]}"
    if [[ "$1" =~ ^-c([0-9]+)$ ]]; then
    args+=("$1")
      count="${BASH_REMATCH[1]}"
      shift
      if [[ "$targetpid" ]]; then
        echo "$count" > /tmp/mpdlinger
        export newcount="$count"
        kill -USR1 "$targetpid"
        exit 0
      fi
    elif [[ "$1" = "-c" ]]; then
      args+=("$1" "$2")
      if [[ "$2" =~ ^[0-9]+$ ]]; then
        count="$2"
        shift 2
        if [[ "$targetpid" ]]; then
          echo "$count" > /tmp/mpdlinger
          export newcount="$count"
          kill -USR1 "$targetpid"  #can't delete entirely...
          exit 0
        fi
      else
        echo "Error: -c requires a number argument."
        exit 1
      fi
    fi
  elif [[ "$1" = next ]]; then
    args+=("$1")
    nextblock
    exit
  elif [[ "$1" =~ ^[0-9]+$ ]]; then
    args+=("$1")
    limit="$1"
    shift
  elif [[ "$1" = --exec ]]; then
    printf 'mpdlinger called with --exec option for internal control.\n'
    execoption=1
    shift
  else
    echo "Unknown option: $1"
    shift
  fi
done


if [[ "$screenname" ]]; then
  pause "$screenname"
  hr2 "$bold Calling mpdlinger in GNU screen $tput0"
  [[ -d "$musicdir" ]] && cd "$musicdir" || cd "$HOME" || cd /
  printf \\n\\n
  screen -dmS "${screenname:0:26}" mpdlinger "${args[@]}"
  screen -ls
  exit
fi

. <(mpd-current.py)

! [[ "$current" ]] && current="$song_id"

#! [[ "$current" ]] && . <(mpd-current.py) && current="$song_id"

# handle the -p / paused entry state:
if "$paused"; then
#  echo "pauseloop"|"${lolargs[@]}"
  pauseloop
fi


# check to make sure random is off when $0 starts:
if [[ "$initrand" = off ]] || { [[ "$random" = '✅' ]] && (( count < limit )); }; then
  echo "warn: turning random off"
  mpcp -q random off
elif [[ "$initrand" = on ]] || { [[ "$random" = '❌' ]] && (( count >= limit )); }; then
  echo "warn: turning random on"
  mpcp -q random on
fi


clear -x
printf '%s \n%s \n%s \n \n%s\n ' \
       "$(toilet -tf "$font1" "$artist / $title")" \
       "$(toilet -tf "$font1" "$album:")" \
       "$(toilet -tf "$font1" "$count/$limit")" \
       "$(mpctitle)" |
   "${lolargs[@]}" &

# oneline this with: printf '%s \n%s \n%s \n \n%s\n ' "$(toilet -tf "$font1" "$artist")" "$(toilet -tf "$font1" "$album:")" "$(toilet -tf "$font1" "$count/$limit")" "$(mpctitle)"



while output=( $(\mpc idle playlist player) ); do
  if [[ "${output[@]}" = playlist\ player ]]; then

    if [[ "$paused" = "true" ]]; then
      echo "mpdlinger paused. Waiting to be resumed..."
      sleep 1
      continue
    fi

    . <(mpd-current.py)

    if (( current != song_id )); then
      current="$song_id"
      ((count++))
    fi
    wait
    clear -x
    randomst=$(( count >= limit ? 1 : 0 ))
    (( randomst )) && randomst='on' || randomst='off'
#    if "$randomst"; then randomst='on'; else randomst='off'; fi
    printf '%s \n%s \n%s \n \n%s\n ' \
           "$(toilet -tf "$font1" "$artist / $title")" \
           "$(toilet -tf "$font1" "$album:")" \
           "$(toilet -tf "$font1" "$count/$limit")" \
           "$(mpctitle random $randomst)" |
      "${lolargs[@]}" &
    if (( count >= "$limit" )); then
      count=0
    fi
  fi
done



#Character	Name	Unicode	Decimal
#═	Box Drawings Double Horizontal	U+2550	9552
#╤	Box Drawings Down Double and Horizontal Single	U+2564	9572
#
#Arrow Characters
#Character	Name	Unicode	Decimal
#←	Left Arrow	U+2190	8592
#→	Right Arrow	U+2192	8594
#⇐	Left Double Arrow	U+21D0	8656
#⇒	Right Double Arrow	U+21D2	8658
#▶	Black Right-Pointing Triangle	U+25B6	9654
#◀	Black Left-Pointing Triangle	U+25C0	9664


