#!/bin/bash
[[ "$TERM"=dumb || -z "$TERM" ]] && TERM="xterm-256color"
export TERM

editscript(){
  local scriptpath script path swp; scriptpath=$(realpath "$0" 2>/dev/null); script="${scriptpath##*/}"; path="${scriptpath%/*}"; swp="$path/.$script.swp"
  [[ ! -e "$swp" ]] && printf "\n\n%s\n\n" "$swp" && (/usr/bin/nano "$scriptpath") && exit
  printf "\n%s is already being edited.\n%s exists; try fg or look in another window.\n" "$scriptpath" "$swp"; exit ; }

[[ "$1" == @(edit|e|-e) ]] && editscript

. mpdignore.functions
. $HOME/.config/mpd-local.conf

# [[ ! "$mpdhost" ]] && mpdhost=[—redacted—]

c_path_cur=$(tput sitm; tput setaf 7) # pale whiute path
c_path_que=$(tput sitm; tput setaf 7) # pale white

#c_aa=$(tput sitm; tput setaf 4) # Blue for artist and album
c_aa_cur=$(tput sitm; tput setaf 33) # Blue for artist and album
c_aa_que=$(tput sitm; tput setaf 12) # Blue for artist and album

#c_title_cur=$(tput sitm; tput setaf 11) # Magenta for the song file name
#c_title_cur=$(tput sitm; tput setaf 178) # Magenta for the song file name
c_title_cur=$(tput sitm; tput setaf 214) # Magenta for the song file name
c_title_que=$(tput sitm; tput setaf 3) # Magenta for the song file name

boldred="$(tput setaf 9 bold)"


pause(){ read -rp "$*" < /dev/tty; }

notify(){
  source <(mpd-current.py)
  output=( $(notify-send -a "mpctitle" -i audio-x-generic "$title" "by <b>$artist</b> on <b>$album</b>" 2&>1) )
  nserr="$?"
  if (( nserr != 0 )) &&
     ! echo "$output" | grep -q "GDBus.Error:org.freedesktop.DBus.Error.ServiceUnknown: The name org.freedesktop.Notifications was not provided by any .service files"; then
     echo "Error: $output"
  fi
}


getlast(){
  va=false
  [[ "$mpdhost" = "localhost" ]] &&
       lastpath=$(grep -E  'player: (played|skipped)' /var/log/mpd/mpd.log|tail -1)
  [[ "$mpdhost" != "$localhost" ]] &&
       lastpath=$(ssh -p "$sshport" "$mpdhost" "grep -E 'player: (played|skipped)' /var/log/mpd/mpd.log | tail -1")
       lastpath=$(ssh -p "$sshport" "$mpdhost" "grep -E 'player: (played|skipped)' /var/log/mpd/mpd.log | tail -1" 2>/tmp/lastpath.err)

#catch and handle known irrelevant ssh errors that will get adddressed elsewhere
       readarray -t lastpatherr < /tmp/lastpath.err && rm /tmp/lastpath.err
       if [[ " ${lastpatherr[@]} " =~ "mux_client_request_session: session request failed: Session open refused by peer" ]]; then
    lastpatherr=($(printf "%s\n" "${lastpatherr[@]}" | grep -vE 'mux_client_request_session: session request failed: Session open refused by peer'))
       fi
       if [[ " ${lastpatherr[@]} " =~ "ControlSocket.+already exists, disabling multiplexing" ]]; then
    lastpatherr=($(printf "%s\n" "${lastpatherr[@]}" | grep -vE 'ControlSocket.+already esits, disabling multiplexing'))
       fi

# might want to do this at the end?
[[ "${lastpatherr[0]}" ]] && printf ..\\n\\n "${lastpatherr[0]}"

  lastfile="${lastpath##*\/}"; lastfile="${lastfile%\"*}";
  lastpath="${lastpath%\"}"; lastpath="${lastpath#*\"}"
  lastfullpath="$musicdir/$lastpath"
  if [[ "$lastfile" =~ .+\ --\ [[:digit:]]{1,3}-[[:digit:]]{1,3}\ -\ .+ ]]; then
    lastartist="${lastfile%% -- *}"
    lasttitle="${lastfile#* - }"
  elif [[ "$lastfile" =~ ^[[:digit:]]{2,3}-[[:digit:]]{2,3}\ -\ .+\ --\ .+\..+ ]]; then
    lastartist="${lastfile%% -- *}"; lastartist="${lastartist#* - }"
    lasttitle="${lastfile#* -- }"
  else
    lastartist="THE PATH $lastfile DOES NOT FIT THE REGEX"
    lasttitle="$lastartist"
    lastalbum="$lastartist"
  fi

  lasttitle="${lasttitle%.*}"
  lastalbum="${lastpath%/*}"
  [[ "$lastalbum" =~ \/ ]] && lastalbum="${lastalbum##*\/}"
  lastalbum="${lastalbum#* -- }"
  lastalbum="${lastalbum%\(*}"

  lastfilepath="$lastfullpath"
}


mpcq(){
 if "$qq"; then
  \mpc -q -h "$mpdpass@$mpchost" "$@"
 else
  \mpc -h "$mpdpass@$mpchost" "$@"
 fi
}

### Main Code: mpctitle

if [[ "$1" = --fromnext ]]; then shift; fromnext=true; fi

if [[ "$1" = -q ]]; then q=true; shift; else q=false; fi       #for \mpc -q to be called f/quiet
if [[ "$1" = -qq ]]; then qq=true; shift; else qq=false; fi    #for \mpc -q AND mpctitle output quiet

if "$q" || "$qq"; then mpcq "$@"; exit "$?"; fi

if [[ "$1" =~ '-t'|'-h' ]]; then
  [[ "$1" = '-t' ]] && shift && finalout="$1"                  #this is printed after the mpctitle stuff
  [[ "$1" = '-h' ]] && shift && hr2out="$1"                    #this is printed in the hr2 banner at the end
  shift #"$#"
elif [[ "$1" = @(rand@(|om)|consume|repeat|single|toggle|pause|play|crop) ]]; then
  if [[ "$2" = @(on|off) ]]; then
    \mpc -q -h "$mpdpass@$mpchost" "$1" "$2" || { echo "Check mpd connection"; exit 1; }
     hr2out="$1 $2"
     shift 2
#DB     pause "$1"
     mpctitle -h "$hr2out" "${@:+$@}"  #${@:+$@}: This is a conditional expression that will either use the value of ${@} (the list of arguments) or be empty if ${@} is not set. :+: This syntax checks if ${@} is non-empty. If it is, it expands to $@, meaning all arguments. If ${@} is empty, it expands to nothing (i.e., an empty string).
     exit "$?"
  elif [[ "$2" =~ ^[[:digit:]]+$ ]]; then
    \mpc -q -h "$mpdpass@$mpchost" "$1" "$2" || { echo "Check mpd connection"; exit 1; }
    shift 2
    exec mpctitle "${@:+$@}"
    exit "$?"
  else
    \mpc -q -h "$mpdpass@$mpchost" "$1" || { echo "Check mpd connection"; exit 1; }
     shift
     mpctitle "${@:+$@}"
     exit "$?"
  fi
elif [[ "$1" = @(seek) ]]; then
  bftime="$(\mpc -h "$mpdpass@$mpchost" status %currenttime%/%totaltime%\ \(%percenttime%\))"
  bftime="${bftime/ (  / (}"; bftime="${bftime/ ( / (}"
  bfpct="${bftime#*\(}"; bfpct="${bfpct%\)*}" #; echo "${bfpct##* }"
  \mpc -q -h "$mpdpass@$mpchost" "$1" "$2"  ||  { echo "Check mpd connection"; exit 1; }
  shift 2
  afttime="$(\mpc -h "$mpdpass@$mpchost" status %currenttime%/%totaltime%\ \(%percenttime%\))"
  afttime="${afttime/ (  / (}"; afttime="${afttime/ ( / (}"
  aftpct="${afttime#*\(}"; aftpct="${aftpct%\)*}" #; echo "${bfpct##* }"
#  mpctitle -h "${boldred}seek: $bftime > $afttime$tput0" "$@"
  mpctitle -h "seek: ${bftime%%\/*} > ${afttime% *} (${bfpct} > ${aftpct})" "$@"
  exit "$?"
elif [[ "$1" = 'next' ]]; then
  shift
  next "$@"
  exit "$?"
elif [[ "$1" = notify ]]; then
  notify
  exit "$?"
elif [[ "$1" = enabled ]]; then
  hr2 "$1"
  mpcp outputs|grep --color=always enabled
  shift
elif [[ "$1" =~ vol(|ume) ]]; then
  volout="$(\mpc vol "$2")"
  ec="$?"
  if ! (( "$ec" )); then
    volout="$(echo "$volout"|awk '/volume:/ {print $2}')"
    shift 2
    printf 'exec mpctitle -h "volume: %s" %s' "$volout" "$@"
    exec mpctitle -h "volume: $volout" "$@"
  else
    shift 2
    printf 'exec mpctitle -t "volume: %s" %s' "$volout" "$@"
    exec mpctitle -t "volume: $volout" "$@"
  fi
elif [[ "$1" = save ]]; then
  if ! saveout=$(\mpc -q -h "$mpdpass@$mpchost" save "$2" 2>&1); then
    if [[ "$saveout" = MPD\ error:\ Playlist\ already\ exists ]]; then
      printf %s\\n "$saveout"
      unset saveout
      confirm "Would you like to remove $mpdpldir/$2.m3u?" &&
      [[ -f "$mpdpldir/$2.m3u" ]] && { rm "$mpdpldir/$2.m3u" || sudo rm "$mpdpldir/$2.m3u"; } &&
        saveout="$(\mpc -q -h "$mpdpass@$mpchost" "$1" "$2" 2>&1)" ||
        { printf '%s\nUnable to remove playlist, MPD still reports error. exit 1' "$saveout"; exit 1; }
    elif [[ "${saveout}" = "MPD error: Failed to create "*".m3u: Permission denied" ]]; then
         namei -l "$mpdpldir"
         confirm "Would you like to chown $mpduser:$mpdgroup $mpdpldir?" && sudo chown $mpd:media "$mpdpldir"
         ! saveout=$(\mpc -q -h "$mpdpass@$mpchost" save "$2" 2>&1) &&
      { printf '\nUnable to create playlist due to a fucked up permissions issue:\n%s\n\n%s\n\nexit 1\n' \
               "$saveout" "$(namei -l /library/music/mpdplaylists)"; exit 1; }
    else
      { printf '\nMPD reports error:\n%s\nexit 1\n' "$saveout"; exit 1; }
    fi
  fi
  mpctitle
  ls "$mpdpldir"|grep ".*$2.*" -C 20 --color=always
  exit
elif [[ "$1" = update ]]; then
  mpcout="$(\mpc -h "$mpdpass@$mpchost" "$@")" ||  { echo "Check mpd connection"; exit 1; }
  mpctitle -t "$mpcout"
  exit
elif [[ "$1" = -f ]]; then
  mpcout="$(\mpc -h "$mpdpass@$mpchost" "$@")" ||  { echo "Check mpd connection"; exit 1; }
  mpctitle -h "${mpcout%%$'\n'*}" #-t "${mpcout#*$'\n'}"

  exit
fi

"${fromnext:=false}"

if ! "$fromnext"; then
  getlast
  output=( "$(echo "$c_aa_que"; hr2 LAST)" )
  output+=( "$(title last)" ) || { echo "Check $mpdlog"; exit 1; }
fi

source <(mpd-current.py)

output+=( "$(echo "$bold$white"; hr2 CURRENT)" )
output+=( "$(title current)" )

output+=( "$(echo "$(tput setaf 3)"; hr2 QUEUED)" )
output+=( "$(title queued)" ) ||  { echo "Check mpd connection!"; exit 1; }

unset paused

[[ "$state" =~ paused ]] && paused=true
output+=( "$(echo; hr2 STATUS)" )

output+=( "$( printf '         %s%s%s%s%s - %s%s%s%s%s\n' \
  "$bold" \
  "$c_aa_cur" \
  "${ritm}" \
  "${paused:+$italics}" \
  "$artist" \
  "$c_title_cur" \
  "${ritm}" \
  "${paused:+$italics}" \
  "$title" \
  "$tput0" )" )

#\mpc status "\[%state%\] ##%songpos%/%length%  %currenttime%/%totaltime% (%percenttime%)\nvolume:%volume%   repeat: %repeat%   random: %random%   single: %single%   consume: %consume%"

output+=( "$(printf '         %s%s[%s%s%s%s%s%s] #%s%s%s/%s  %s/%s (%s%%)\n' \
  "${paused:+$italics}" \
  "$bold" \
  "$tput0" \
  "${paused:+$italics}" \
  "$state" \
  "$tput0" \
  "${paused:+$italics}" \
  "$bold" \
  "$tput0" \
  "${paused:+$italics}" \
  "$song_position" \
  "$song_length" \
  "$(sec2sex "$elapsed")" \
  "$(sec2sex "$total_time")" \
  "${percent_time%.*}" )" )

#printf "volume: %s%%   repeat: %s   random: %s   consume: %s   %s\n\n" \

output+=( "$(printf '         volume: %s%%%s %s %s random: %s%s%s consume: %s%s %s%s\n\n' \
  "$volume" \
  "$tput0" \
  "$repeat" \
  "${paused:+$italics}" \
  "$tput0" \
  "$random" \
  "${paused:+$italics}" \
  "$tput0" \
  "$consume" \
  "${single:+single: $single}" \
  "$tput0" )" )

if [[ "$@" && "$@" != "" ]]; then
  output+=( "$(echo; hr2 "$1"; \mpc -q -h "$mpdpass@$mpchost" "$@")" )
else
  [[ "$1" || "$hr2out" ]] && output+=( "$(echo "$c_title_cur$bold"; hr2 "${hr2out:-$1}";echo "$tput0"; \mpc -q -h "$mpdpass@$mpchost")" ) ||
  output+=( "$(tput setaf 1; echo; hr2 "${0##*\/}"; \mpc -q -h "$mpdpass@$mpchost"; echo "$white")" )

fi
[[ "$finalout" ]] && output+=( "${finalout[@]}" )
printf %s\\n "${output[@]}"
