#!/bin/bash

editscript(){
  local scriptpath script path swp; scriptpath=$(realpath "$0" 2>/dev/null); script="${scriptpath##*/}"; path="${scriptpath%/*}"; swp="$path/.$script.swp"
  [[ ! -e "$swp" ]] && printf "\n\n%s\n\n" "$swp" && (/usr/bin/nano "$scriptpath") && exit
  printf "\n%s is already being edited.\n%s exists; try fg or look in another window.\n" "$scriptpath" "$swp"; exit ; }

[[ "$1" == @(edit|e|-e) ]] && editscript

. mpdignore.functions

c_path_cur=$(tput sitm; tput setaf 7) # pale whiute path
c_path_que=$(tput sitm; tput setaf 7) # pale white

#c_aa=$(tput sitm; tput setaf 4) # Blue for artist and album
c_aa_cur=$(tput sitm; tput setaf 33) # Blue for artist and album
c_aa_que=$(tput sitm; tput setaf 12) # Blue for artist and album

#c_title_cur=$(tput sitm; tput setaf 11) # Magenta for the song file name
#c_title_cur=$(tput sitm; tput setaf 178) # Magenta for the song file name
c_title_cur=$(tput sitm; tput setaf 214) # Magenta for the song file name
c_title_que=$(tput sitm; tput setaf 3) # Magenta for the song file name

#white=$(tput setaf 7)
#tput0=$(tput sgr0)
#bold=$(tput bold)
#italics=$(tput sitm)
#ritm="$(tput ritm)"

pause(){ read -rp "$*" < /dev/tty; }

notify(){
  source <(mpd-current.py)
  output=( $(notify-send -a "mpctitle" -i audio-x-generic "$title" "by <b>$artist</b> on <b>$album</b>" 2&>1) )
  nserr="$?"
  if (( nserr != 0 )) &&
     ! echo "$output" | grep -q "GDBus.Error:org.freedesktop.DBus.Error.ServiceUnknown: The name org.freedesktop.Notifications was not provided by any .service files"; then
     echo "Error: $output"
  fi
}

#hr2() {
#  local width="$(tput cols)"
#  local status="$1"
#  local left_padding="${2:-22}"
#  local left_dashes=$(printf -- '%.0s—' $(seq 1 "$left_padding"))
#  local right_dashes=$(printf -- '%.0s—' $(seq 1 "$((width - left_padding - ${#status} - 2))"))
#  printf '%s %s %s\n' "$left_dashes" "$status" "$right_dashes"
#}

if [[ "$1" = @(rand@(|om)|consume|repeat|single|toggle|pause|play) ]]; then
  if [[ "$2" = @(on|off) ]]; then
    \mpc -q -h "$mpdpass@$mpdhost" "$1" "$2" || { echo "Check mpd connection"; exit 1; }
     shift 2
     mpctitle "${@:+$@}"
     exit "$?"
  else
    \mpc -q -h "$mpdpass@$mpdhost" "$1" || { echo "Check mpd connection"; exit 1; }
     shift
     mpctitle "${@:+$@}"
     exit "$?"
  fi
 \mpc -q -h "$mpdpass@$mpdhost" "$1" ||  { echo "Check mpd connection"; exit 1; }
  shift
  mpctitle "$@"
  exit "$?"
elif [[ "$1" = @(seek) ]]; then
  \mpc -q -h "$mpdpass@$mpdhost" "$1" "$2"  ||  { echo "Check mpd connection"; exit 1; }
  shift 2
  mpctitle "$@"
  exit "$?"
elif [[ "$1" = 'next' ]]; then
  shift
  next "$@"
  exit "$?"
elif [[ "$1" = notify ]]; then
  notify
  exit "$?"
elif [[ "$1" = enabled ]]; then
  hr2 "$1"
  mpcp outputs|grep --color=always enabled
  shift
elif [[ "$1" = update ]]; then
 \mpc -q -h "$mpdpass@$mpdhost" "$@" ||  { echo "Check mpd connection"; exit 1; }
  mpctitle
  exit
fi

#get-current-json
source <(mpd-current.py)

#output=( "$(printf '\n%s-------- ------------- QUEUED ------------   %s' "$(tput setaf 7)" "${tput0}")" )
output=( "$(echo; hr2 QUEUED)" )
output+=( "$(title queued)" ) ||  { echo "Check mpd connection!"; exit 1; }
#if ! output+=( "$(title queued)" ); then echo "Check mpd connection" && exit 1; fi

unset paused

#output+=( "$(printf '\n%s-------- ------------- CURRENT -----------   %s' "${bold}" "${tput0}")" )
output+=( "$(echo; hr2 CURRENT)" )
output+=( "$(title current)" )

unset paused
[[ "$state" =~ paused ]] && paused=true

output+=( "$( printf '\n         %s%s%s%s%s - %s%s%s%s%s\n' \
  "$bold" \
  "$c_aa_cur" \
  "${ritm}" \
  "${paused:+$italics}" \
  "$artist" \
  "$c_title_cur" \
  "${ritm}" \
  "${paused:+$italics}" \
  "$title" \
  "$tput0" )" )

#\mpc status "\[%state%\] ##%songpos%/%length%  %currenttime%/%totaltime% (%percenttime%)\nvolume:%volume%   repeat: %repeat%   random: %random%   single: %single%   consume: %consume%"

output+=( "$(printf '         %s%s[%s%s%s%s%s%s] #%s%s%s/%s  %s/%s (%s%%)\n' \
  "${paused:+$italics}" \
  "$bold" \
  "$tput0" \
  "${paused:+$italics}" \
  "$state" \
  "$tput0" \
  "${paused:+$italics}" \
  "$bold" \
  "$tput0" \
  "${paused:+$italics}" \
  "$song_position" \
  "$song_length" \
  "$(sec2sex "$elapsed")" \
  "$(sec2sex "$total_time")" \
  "${percent_time%.*}" )" )

#printf "volume: %s%%   repeat: %s   random: %s   consume: %s   %s\n\n" \

output+=( "$(printf '         volume: %s%%%s %s %srandom: %s%s%s consume: %s%s %s%s\n\n' \
  "$volume" \
  "$tput0" \
  "$repeat" \
  "${paused:+$italics}" \
  "$tput0" \
  "$random" \
  "${paused:+$italics}" \
  "$tput0" \
  "$consume" \
  "${single:+single: $single}" \
  "$tput0" )" )

if [[ "$@" && "$@" != "" ]]; then
  output+=( "$(echo; hr2 "$1"; \mpc -q -h "$mpdpass@$mpdhost" "$@")" )
else
  output+=( "$(echo; hr2 "$1"; \mpc -q -h "$mpdpass@$mpdhost")" )
fi

printf %s\\n "${output[@]}"


