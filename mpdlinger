#!/bin/bash

trap cleanup SIGINT
cleanup(){  echo -e "\nExiting..."; pkill lolcat; rm /tmp/mpdlinger 2>/dev/null; mpcex+=( random on ); ${mpcex[@]} | grep --color=always -B2 'random\:\ on'; exit 0; }

#trap 'echo usr1; [[ $newcount ]] && count=$newcount && echo "Count updated to: $count"' USR1
trap 'newcount=$(< /tmp/mpdlinger) && count=$newcount && echo "Count updated to: $count"' USR1
trap 'exec mpdlinger' USR2

editscript(){
  local scriptpath script path swp; scriptpath=$(realpath "$0" 2>/dev/null); script="${scriptpath##*/}"; path="${scriptpath%/*}"; swp="$path/.$script.swp"
     [[ ! -e "$swp" ]] && printf "\n\n%s\n\n" "$swp" && (/usr/bin/nano "$scriptpath") && exit
     printf "\n%s is already being edited.\n%s exists; try fg or look in another window.\n" "$scriptpath" "$swp"; exit ;}
[[ "$1" == @(edit|e|-e) ]] && editscript

pause(){ read -rp "$*" < /dev/tty; }

nextblock(){
  local pid=( $(ps aux|grep '[m]pdlinger'|grep -Ev nano\|mpdlinger\ e|awk '{print $2}') )
  mpcp -q random on
  kill -USR2 "$pid"
  mpcp -q next
  mpcp -q random off
  exit
}

. mpdignore.functions

#fonts are in /usr/share/figlet
font1=future
font2=pagga
font2="$font1"
#filter=metal

#[[ "$1" = '-n' ]] && shift && limit="$1" && shift
mpcex=( mpc "${mpdhost:+-h ${mpdpass:+${mpdpass}@}${mpdhost}}" )

[[ "$STY" ]] && unset COLORTERM
limit=4
unset current
count=1


while [[ "$#" -gt 0 ]]; do
  if [[ "$1" =~ ^-s[0-9]+$ || "$1" == "-s" ]]; then
    pids=( $(ps aux | grep '[m]pdlinger' |grep -Ev nano\|mpdlinger\ e| awk '{print $2}') )
#pout=( "$(ps aux | grep '[m]pdlinger' |grep -Ev nano\|mpdlinger\ e)" )
#echo "${pout[@]}"
#    if [[ ${#pids[@]} -eq 2 ]]; then
#unset targetpid
      (( "${#pids[@]}" > 2 )) && targetpid="${pids[0]}"
#    fi
#pause "${#pids[@]} ${targetpid}"
    if [[ "$1" =~ ^-s([0-9]+)$ ]]; then
      count="${BASH_REMATCH[1]}"
      shift
      if [[ "$targetpid" ]]; then
        echo "$count" > /tmp/mpdlinger
        export newcount="$count"
        kill -USR1 "$targetpid"
        exit 0
      fi
    elif [[ "$1" == "-s" ]]; then
      shift
      if [[ "$1" =~ ^[0-9]+$ ]]; then
        count="$1"
        shift
        if [[ "$targetpid" ]]; then
          echo "$count" > /tmp/mpdlinger
          export newcount="$count"
          kill -USR1 "$targetpid"  #can't delete entirely...
          exit 0
        fi
      else
        echo "Error: -s requires a number argument."
        exit 1
      fi
    fi
  elif [[ "$1" = next ]]; then
    nextblock
    exit
  elif [[ "$1" =~ ^[0-9]+$ ]]; then
    limit="$1"
    shift
  else
    echo "Unknown option: $1"
  fi
done

#while [[ "$#" -gt 0 ]]; do
#  arg="$1"
#
#  if [[ "$arg" =~ ^-s[0-9]+$ ]]; then
#    count="${arg#-s}"
#    shift
#
#  # Handle -s with space and number (-s 2)
#  elif [[ "$arg" == "-s" ]]; then
#    if [[ "$2" =~ ^[0-9]+$ ]]; then
#      count="$2"
#      shift 2
#    else
#      echo "Error: -s requires a number argument."
#      exit 1
#    fi
#
#  elif [[ "$arg" =~ ^[0-9]+$ ]]; then
#    limit="$arg"
#    shift
#
#  else
#    echo "Unknown option: $arg"
#    exit 1
#  fi
#done


lolargs=(lolcat)
#lolargs+=(-ap 2) for use on screen... can we tell if we're in screen and unset "$COLORTERM"?  see lolcat git issues
[[ "$STY" ]] && lolargs+=(-ap 2) || lolargs+=(-tap 2)
lolargs+=(-F 0.075)
lolargs+=(-d 08)
lolargs+=(-s 15)

. <(mpd-current.py)

! [[ "$current" ]] && current="$song_id"
#! [[ "$current" ]] && . <(mpd-current.py) && current="$song_id"

# check to make sure random is off when $0 starts:

if [[ "$random" = '✅' ]] && (( count < limit )); then
  echo "warn: $count < $limit; turning random off"
  mpcex+=( -q random off )
  ${mpcex[@]}
elif [[ "$random" = '❌' ]] && (( count >= limit )); then
  echo "warn: $count >= $limit; turning random on"
  mpcex+=( -q random on )
  ${mpcex[@]}
fi

mpcex=( mpc "${mpdhost:+-h ${mpdpass:+${mpdpass}@}${mpdhost}}" )

#if [[ "$random" = '✅' ]]; then
#  echo "entered $random check"
#  if (( count < limit )); then
#    echo "$count < $limit; turning random off"
#    mpcex+=( -q random off )
#    "${mpcex[@]}"
#  elif (( count >= limit )); then
#    echo "$count >= $limit; turning random on"
#    mpcex+=( -q random on )
#    "${mpcex[@]}"
#  fi
#fi
#

clear -x
printf '%s \n%s \n%s \n \n%s\n ' "$(toilet -tf "$font1" "$artist")" "$(toilet -tf "$font1" "$album:")" "$(toilet -tf "$font1" "$count/$limit")" "$(mpctitle)"|"${lolargs[@]}" &

#printf %s\\n%s\:\\n%s\/%s\\n "$artist" "$album" "$count" "$limit"|toilet -tf "$font1"|"${lolargs[@]}"
#mpctitle|"${lolargs[@]}"
# oneline this with: printf '%s \n%s \n%s \n \n%s\n ' "$(toilet -tf "$font1" "$artist")" "$(toilet -tf "$font1" "$album:")" "$(toilet -tf "$font1" "$count/$limit")" "$(mpctitle)"



while output=( $(\mpc idle playlist player) ); do
  if [[ "${output[@]}" = playlist\ player ]]; then
    . <(mpd-current.py)

    if (( current != song_id )); then
      current="$song_id"
      ((count++))
    fi
    if (( count >= "$limit" )); then
      wait
      clear -x
      printf '%s \n%s \n%s \n \n%s\n ' "$(toilet -tf "$font1" "$artist")" "$(toilet -tf "$font1" "$album:")" "$(toilet -tf "$font1" "$count/$limit")" "$(mpctitle random on)"|"${lolargs[@]}" &
#      printf %s\\n%s\:\\n%s\/%s\\n "$artist" "$album" "$count" "$limit"|toilet -tf "$font1"|"${lolargs[@]}"
#      mpctitle random on|"${lolargs[@]}"
      count=0
    else
      wait
      clear -x
      printf '%s \n%s \n%s \n \n%s\n ' "$(toilet -tf "$font1" "$artist")" "$(toilet -tf "$font1" "$album:")" "$(toilet -tf "$font1" "$count/$limit")" "$(mpctitle random off)"|"${lolargs[@]}" &
#      printf %s\\n%s\:\\n%s\/%s\\n "$artist" "$album" "$count" "$limit"|toilet -tf "$font1"|"${lolargs[@]}"
#      mpctitle random off|"${lolargs[@]}"
    fi
  fi
done
