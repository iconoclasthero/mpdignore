#!/bin/bash
#export LC_CTYPE="UTF-8"

. "$XDG_CONFIG_HOME/mpd-local.conf" 2>/dev/null || . ~/.config/mpd-local.conf

bold="$(tput bold)"
tput0="$(tput sgr0)"
yellow="$(tput setaf 214)"
blue="$(tput setaf 33)"
verbose=false
tunport="$mpdzmqtunport"
retport="$mpdzmqretport"
autosshpid="/tmp/autossh_${tunport}.pid"
ffplaypid="/tmp/ffplayzmq-$(date -Im).pid"
sinkMAC='00:42:79:D9:B6:AF'
sinkname='JBL Xtreme 2'

pause(){ read -rp "$@" < /dev/tty; }

#hr(){ printf -- '%*s\n' "${1:-$COLUMNS}" | tr ' ' "${2:--}"; }

hr() {
  local width="$(tput cols)"
#  local width=${1:-${COLUMNS:-80}}  # Default to 80 if COLUMNS is unset
#  printf -- '%.0s—' $(seq "${1:-$COLUMNS}"); echo; }
  printf -- '%.0s—' $(seq 1 "$width"); echo; }


mpcp(){ [[ "$mpdpass" ]] && mpco+=(-P "$mpdpass")
        [[ "$mpdhost" ]] && mpco+=(-h "$mpdhost")
       \mpc "${mpco[@]}" "$@"
}

resetzmq(){
#  printf '\n%sBluetooth:%s\n%s\n\n' "$btctlout"
  btctlout="$(bluetoothctl disconnect "$sinkMAC"|grep -v "Attempting to disconnect from $sinkMAC")"
  printf '\n%s%sAttempting to disconnect %s%s/%s%s:%s\n%s\n' \
    "$yellow" \
    "$bold" \
    "$blue" \
    "$sinkname" \
    "$sinkMAC" \
    "$yellow" \
    "$tput0" \
    "$btctlout"
  printf %s\\n "$(hr)"

  echo
  before=before
  for j in psaux pkill psaux; do
    printf %s%s "$bold" "$yellow"
    [[ "$j" = psaux ]] && echo "$j $before:" || echo "$j:"
    printf %s "$tput0"
    for i in autossh ffplay bin/mpd.zmq; do
      "$j" "$i"|grep -v -- '--reset'
    done
    [[ "$before"=before ]] && before=after
    hr
    echo
  done
  pause "${yellow}${bold}^C to exit, [Enter] to continue.${tput0}"
  hr
}

startautossh(){
if ! ps aux | grep "[a]utossh.*-L${tunport}:localhost:${tunport}.*${mpdhost}.*-p${sshport}" > /dev/null; then

#  autossh -fvN -M0 -L"${tunport}":localhost:"${tunport}" -R"${retport}":localhost:22 "${mpdhost}" -p"${sshport}"&
#Since you're using -f, you do not need the & at the end of the command; autossh will automatically run in the background. If you include the &, it won’t hurt anything, but it's redundant. You can safely remove it if you prefer. 

  autossh -fvN -M0 -L"${tunport}":localhost:"${tunport}" -R"${retport}":localhost:22 "${mpdhost}" -p"${sshport}"
  \sleep 1
  autossh_pid=$(pgrep -f "autossh/autossh.*-L${tunport}:localhost:${tunport}.*${mpdhost}.*-p${sshport}")
#  echo "$!" > "${autosshpid}"  #this works...but gives the wrong pid.
  echo "$autossh_pid" > "${autosshpid}"  #this might be the right pid?
fi

#
#Purpose of -f in autossh
#-f (fork): This flag causes autossh to fork into the background, which is often desirable if you don't want your terminal to stay tied to the process. It makes the SSH connection run in the background, so the user can continue using the terminal for other tasks. This is useful when you're scripting or need a long-running SSH session without blocking the shell.
#Why Remove -f in My Suggestion?
#When -f is used, the parent shell forks first, then autossh forks and detaches into the background. As a result, the PID you capture using $! is of the shell's child process, not the final autossh process. That's why I initially suggested removing -f, as it allows you to more reliably capture the correct autossh PID.
#
#Compensation for Removing -f:
#By removing -f, you're preventing autossh from forking into the background. To compensate for this, I added & at the end of the command:
#
#bash
#Copy code
#autossh -vN -M0 -L"${tunport}":localhost:"${tunport}" -R"${retport}":localhost:22 "${mpdhost}" -p"${sshport}" &
#This & ensures that the command runs in the background, but without the double-forking behavior that the -f flag triggers. This allows you to capture the correct autossh PID using pgrep.
#
#If You Still Want to Use -f:
#If you absolutely need the -f flag (for instance, if the behavior of autossh requires it to double-fork and detach), you can keep it, but capturing the PID becomes trickier. You'll have to rely on pgrep or ps after the process has forked into the background.
#
#Here’s how you can still use -f and capture the correct PID:
#
#bash
#Copy code
#startssh() {
#  if ! ps aux | grep "[a]utossh.*-L${tunport}:localhost:${tunport}.*${mpdhost}.*-p${sshport}" > /dev/null; then
#    autossh -fvN -M0 -L"${tunport}":localhost:"${tunport}" -R"${retport}":localhost:22 "${mpdhost}" -p"${sshport}"
#    sleep 1  # Give autossh some time to fork and start
#    autossh_pid=$(pgrep -f "autossh.*-L${tunport}:localhost:${tunport}.*${mpdhost}.*-p${sshport}")
#    echo "${autossh_pid}" > "${autosshpid}"
#  fi
#}
#Why This Works:
#-f is still there, so autossh will run in the background just as before.
#pgrep finds the correct autossh process after it forks, using the command-line pattern to match the process.
#This method keeps the original background behavior while ensuring you capture the right PID.
}

startffplay(){
rm /tmp/ffplayzmq-????-??-??T??\:??-04\:00.pid
screen -dmS mpd.zmq sh -c \
  'ffplay -nodisp zmq:tcp://localhost:5555 -loglevel debug & echo $! > "$0"; wait' \
  "${ffplaypid}"
}

editscript(){
  local scriptpath script path swp; scriptpath=$(realpath "$0" 2>/dev/null); script="${scriptpath##*/}"; path="${scriptpath%/*}"; swp="$path/.$script.swp"
     [[ ! -e "$swp" ]] && printf "\n\n%s\n\n" "$swp" && (/usr/bin/nano "$scriptpath") && exit
     printf "\n%s is already being edited.\n%s exists; try fg or look in another window.\n" "$scriptpath" "$swp"; exit ;}

stopffplay(){
screen -S mpd.zmq -X quit &>/dev/null
screen -wipe &>/dev/null
}


confirm(){
 local ans IFS=
 while read -rp "$1" -n1 ans
   do
     printf '\n'
     case "$ans" in
       [Yy]) return 0;;
       [Nn]) return 1;;
     esac
   done
##--> confirm() <--###################################################################################
}

stopmpdzmq(){
 local stopped=false
 while ! "$stopped"; do
   stopffplay
   local autossh_pid="$(cat $autosshpid)"
   killcmd="${nine:+$nine} $autossh_pid"
   kill "$killcmd" #2>/dev/null
   echo
   screen -ls|grep --color=always mpd.zmq
#  psaux ffplay|grep 5555
#  psaux autossh|grep 5555:localhost:5555
   printf 'The output of `psaux 5555` should be empty: \n'
   hr
   ps aux|grep --color=never "[${tunport:0:1}]${tunport:1}"|grep --color=always -E autossh\|ffplay\|"$mpdhost"
   echo
   hr
   echo
   confirm "Are ffplay and autossh closed? " && stopped=true
   nine='-9'
 done
 echo
 if confirm "Disconnect bluetooth speaker $sinkname? "; then
  echo
  btctlout="$(bluetoothctl disconnect "$sinkMAC")"
  printf "$btctlout"|grep --color=always -E Attempting\ to\ disconnect\ from\ "$sinkMAC"\|Successful\ disconnect
  echo
  hr
 fi
 echo
 confirm "Pause mpd on $mpdhost? " && mpctitle pause
 hr
}

connectBT(){
  btctlout=("$(bluetoothctl list)")
  btctlout+=("$(bluetoothctl connect "$sinkMAC" 2>&1)") &&
    connected=yes
  btctlout+=("$(bluetoothctl info "$sinkMAC")")
  declare -p btctlout > "$btctlfifo"
}


[[ "$1" == @(edit|e|-e) ]] && editscript && exit
[[ "$1" = --reset ]] && shift && resetzmq
[[ "$1" = @(--verbose|-v) ]] && verbose=true && shift
[[ "$1" = @(--quit|--exit|quit|exit) ]] && { stopmpdzmq; exit; }


btctlfifo=$(mktemp -u)
mkfifo "$btctlfifo"

connected=$(bluetoothctl info "$sinkMAC"|grep Connected|awk '{print $2}')
if [[ "$connected" = no ]]; then
  connectBT&
#  btctlout=$(<"$btctlfifo")
  . "$btctlfifo"
else
  btctlout="$(echo "$sinkname/$sinkMAC was already connected."; bluetoothctl list; bluetoothctl info "$sinkMAC")"
fi

startautossh&

stopffplay

if "$verbose"; then
  screenout=$(screen -ls)
  printf '\n%s%sNo mpd.zmq screens should be open:%s \n%s%s' "$yellow" "$bold" "$tput0" "$(hr)" "$screenout"
fi

startffplay&

zmqoutput="$(mpcp outputs|\grep zmq|awk '{print $2}')"
enableout=$(mpcp enable "$zmqoutput")
playout=$(mpctitle play)

# Start a new detached screen session named "mpd.zmq" running ffplay
# screen -dmS mpd.zmq ffplay -nodisp zmq:tcp://localhost:5555 -loglevel debug

if "$verbose"; then
  printf '\n%s%sAn autossh/ssh should be running a tunnel to %s on %s which ffplay is using:%s \n' \
    "${yellow}" \
    "${bold}" \
    "$mpdhost" \
    "$tunport" \
    "$tput0"
  hr
  mpdhost1="[${mpdhost:0:1}]${mpdhost:1}"
  ps aux|grep --color=never "[${tunport:0:1}]${tunport:1}"|grep --color=always -E autossh\|ffplay\|"$mpdhost" ||
    ps aux|grep --color=always [a]utossh

#  ps aux|grep --color=always '[5]555'| awk '{ print $2, substr($0, index($0, $11)) }' || ps aux|grep --color=always [a]utossh
# ps aux|grep --color=always '[5]555' || ps aux|grep --color=always [a]utossh
# ps aux|grep -E --color=always '5555\|"$mpdhost1"' || ps aux|grep --color=always [a]utossh
 \sleep 1.25s
  printf '\n%s%sProcess pid info:%s\n' "$bold" "$yellow" "$tput0"
  hr
  printf %s\ %s\\n "$autosshpid" "$(cat "$autosshpid")"
 \sleep 1.25s
# echo "$ffplaypid $(cat "$ffplaypid")"
  printf %s\ %s\\n "$ffplaypid" "$(cat "$ffplaypid")"
# [[ "$connected" = no ]] && btctlout="$btctlout $({ bluetoothctl list; bluetoothctl info; }|grep -E 'Controller|Device|Name:|Paired:|Connected:')"
# btctlout="$btctlout $(echo; bluetoothctl info)"
  printf \\n%s%sBluetooth\ device%s\ %s%s\/%s%s\:%s\\n \
    "$bold" \
    "$yellow" \
    "$tput0" \
    "$blue" \
    "$sinkname" \
    "$sinkMAC" \
    "$yellow" \
    "$tput0"
  hr
# printf %s\\n "${btctlout[@]}"|grep --color=always -Ei 'Controller|Attempting|Connection|not\ available|"$sincMAC"|Device|Name:|Paired:|Connected:'
  printf %s\\n "${btctlout[@]}"|grep --color=always -Ei 'Controller|Attempting|Connection|not\ available|"$sincMAC"|Device|Name:|Paired:|Connected:'
# printf %s\\n "${btctlout[@]}"
 \sleep 1s
  printf '\n%s%sMPD enable fmpeg/zmq output:%s\n' "$bold" "$yellow" "$tput0"
  hr
  printf %s\\n "$(echo "$enableout"|grep --color=always ffmpeg\ zmq)"
 \sleep 1s
  printf '\n%s%sPlay mpd: \n%s' "$bold" "$yellow" "$tput0"
  hr
  printf %s\\n\\n "$playout"
fi

