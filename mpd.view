#!/bin/bash
# nb: the swp file that editscript relies on is provided by nano

MPDSOCK="/var/run/mpd/socket"
LINES_TO_CLEAR=28
# Define tput variables for formatting
bold=$(tput bold)
tput0=$(tput sgr0)
red=$(tput setaf 1)
blue1=$(tput setaf 246)
green=$(tput setaf 2)
green=$(tput setaf 82)
blue0=$(tput setaf 4)
blue1=$(tput setaf 12)
blue2=$(tput setaf 39)
blue=$(tput setaf 33)
red=$(tput setaf 196)
yellow=$(tput setaf 3)
black=$(tput setaf 0)
white=$(tput setaf 7)
bg_blue=$(tput setab 4)
bg_white=$(tput setab 7)
bg_black=$(tput setab 0)
normal="$tput0"


editscript(){
  local scriptpath script path swp; scriptpath=$(realpath "$0" 2>/dev/null); script="${scriptpath##*/}"; path="${scriptpath%/*}"; swp="$path/.$script.swp"
     [[ ! -e "$swp" ]] && printf "\n\n%s\n\n" "$swp" && (/usr/bin/nano "$scriptpath") && exit
     printf "\n%s is already being edited.\n%s exists; try fg or look in another window.\n" "$scriptpath" "$swp"; exit ;}

pause(){ read -rp "$*" </dev/tty ; }

sec2sex() {
    [[ "$1" = @(-H|--hours) ]] && local disp_hr=true && shift
    local decsec="$1"
    local secdec="${decsec#*.}"; (( ${secdec:0:1} >= 5 )) && secdec=1 || secdec=0
    local seconds="${decsec%.*}"; seconds=$(( seconds + secdec ))
    local hours=$(( seconds / 3600 ))
    local remainder=$(( seconds % 3600 ))
    local minutes=$(( remainder / 60 ))
    local seconds=$(( remainder % 60 ))
    "$disp_hr" 2>/dev/null && printf "%02d:%02d:%02d\n" "$hours" "$minutes" "$seconds" ||
      printf %02d\:%02d\\n "$minutes" "$seconds"
}



format_path() {
  local path="$1"
  local term_width=$(tput cols)
  local length=11  # Initial length set to the length of the initial indentation
#  local indent='           '  # 11 spaces
  local indent="$(printf %*s $length '')"
  local formatted_path="$indent"  # Add initial indentation here
  local max_length=$(( term_width - 2 ))  # Account for two spaces from the right border

  # Split the path into an array based on the '/' character
  IFS='/' read -ra parts <<< "$path"
  for ((i = 0; i < ${#parts[@]}; i++)); do
    part="${parts[i]}"
    # Check if adding the next part will exceed the maximum length
    if (( length + ${#part} + 1 > max_length )); then
      formatted_path+="/\n$indent"  # Add newline and indentation after slash
      length=${#indent}  # Reset length to initial indentation length
    fi
    # Add a slash if the current length is greater than the initial indentation length
    if (( length > ${#indent} )); then
      formatted_path+="/"
      (( length++ ))
    fi
    formatted_path+="$part"
    (( length += ${#part} ))
  done

  # Add a slash at the end if it's a directory
  if [[ -d "$path" || -z "${path##*/}" ]]; then
    formatted_path+="/"
  fi

  echo -e "$formatted_path"
}



mono_mpd_response() {
    local file="" title="" album="" artist="" next_file="" next_title="" next_album="" next_artist="" state=""
    local song_pos="" song_total="" elapsed="" duration="" volume="" repeat="" random="" single="" consume=""
    local nextsong_id="" current="$(mpc current -f %position%)"

    while read -r line; do
        case "$line" in
            file:*)
                file="${line#file: }";;
            Album:*)
                album="${line#Album: }";;
            Artist:*)
                artist="${line#Artist: }";;
            Title:*)
                title="${line#Title: }";;
            nextsong:*)
                nextsong_id="${line#nextsong: }";;
            state:*)
                state="${line#state: }";;
            song:*)
                song_pos="${line#song: }";;
            playlistlength:*)
                song_total="${line#playlistlength: }";;
            elapsed:*)
                elapsed="${line#elapsed: }";;
            duration:*)
                duration="${line#duration: }";;
            volume:*)
                volume="${line#volume: }";;
            repeat:*)
                repeat="${line#repeat: }";;
            random:*)
                random="${line#random: }";;
            single:*)
                single="${line#single: }";;
            consume:*)
                consume="${line#consume: }";;
        esac
    done

    # If nextsong_id is not empty, get the next song's info
    if [ -n "$nextsong_id" ]; then
        nextsong_info=$(mpdc "playlistinfo $nextsong_id")

        while read -r line; do
            case "$line" in
                file:*)
                    next_file="${line#file: }";;
                Album:*)
                    next_album="${line#Album: }";;
                Artist:*)
                    next_artist="${line#Artist: }";;
                Title:*)
                    next_title="${line#Title: }";;
            esac
        done <<< "$nextsong_info"
    fi


    # Calculate the percentage of the song that has played
    percentage=$(awk -v e="$elapsed" -v d="$duration" 'BEGIN { printf "%.0f", (e / d) * 100 }')

    # Format file paths to wrap at slashes
    file_wrapped=$(echo "$file" | sed 's/\//\n\//g')
    next_file_wrapped=$(echo "$next_file" | sed 's/\//\n\//g')

    # Clear the top LINES_TO_CLEAR lines
    tput cup 0 0
    for ((i = 0; i < LINES_TO_CLEAR; i++)); do
        tput el
        tput cud1
    done
    tput cup 0 0

    # Format and print the output
    echo "${tput0}${red}${bold}"
    echo "[${state}] #${song_pos}/${song_total}   ${elapsed}/${duration} (${percentage}%)"
    echo "volume: ${volume}%   repeat: ${repeat}   random: ${random}   single: ${single}   consume: ${consume}${tput0}"
    echo
    echo "${bold}Playing: ${blue}${title}${tput0} by ${bold}${red}${artist}${normal}"
    echo "${bold}         ${yellow}${album}${normal}"
    echo "${bold}${blue1}$(format_path "${file}")${normal}"
    echo "${bold}Up next:${normal} ${blue}${next_title}${normal} by ${red}${next_artist}${tput0}"
    echo "${bold}         ${yellow}${next_album}${tput0}"
    echo "${blue1}$(format_path "${next_file}") ${tput0}"
    echo

#this will print out a useless playlist snippet...
#for ((i=1; i<=6; i++)); do
#    while read -r line; do
#            case "$line" in
#                file:*)
#                    next_file="${line#file: }";;
#                Album:*)
#                    next_album="${line#Album: }";;
#                Artist:*)
#                    next_artist="${line#Artist: }";;
#                Title:*)
#                    next_title="${line#Title: }";;
#            esac
#        done < <(mpdc playlistinfo\ $(( current + i )))
#  echo "$next_file"
#done


}

parse_mpd_response() {
    local file="" title="" album="" artist="" next_file="" next_title="" next_album="" next_artist="" state=""
    local song_pos="" elapsed="" duration="" volume="" repeat="" random="" single="" consume=""
    local nextsong_id="" current="$(mpc current -f %position%)"

    while read -r line; do
        case "$line" in
            file:*)
                file="${line#file: }";;
            Album:*)
                album="${line#Album: }";;
            Artist:*)
                artist="${line#Artist: }";;
            Title:*)
                title="${line#Title: }";;
            nextsong:*)
                nextsong_id="${line#nextsong: }";;
            state:*)
                state="${line#state: }";;
            song:*)
                song_pos="${line#song: }";;
            playlistlength:*)
                song_total="${line#playlistlength: }";;
            elapsed:*)
                elapsed="${line#elapsed: }";;
            duration:*)
                duration="${line#duration: }";;
            volume:*)
                volume="${line#volume: }";;
            repeat:*)
                repeat="${line#repeat: }";;
            random:*)
                random="${line#random: }";;
            single:*)
                single="${line#single: }";;
            consume:*)
                consume="${line#consume: }";;
        esac
    done

    # If nextsong_id is not empty, get the next song's info
    if [ -n "$nextsong_id" ]; then
        nextsong_info=$(mpdc "playlistinfo $nextsong_id")

        while read -r line; do
            case "$line" in
                file:*)
                    next_file="${line#file: }";;
                Album:*)
                    next_album="${line#Album: }";;
                Artist:*)
                    next_artist="${line#Artist: }";;
                Title:*)
                    next_title="${line#Title: }";;
            esac
        done <<< "$nextsong_info"
    fi


    # Calculate the percentage of the song that has played
    percentage=$(awk -v e="$elapsed" -v d="$duration" 'BEGIN { printf "%.0f", (e / d) * 100 }')

    # Format file paths to wrap at slashes
    file_wrapped=$(echo "$file" | sed 's/\//\n\//g')
    next_file_wrapped=$(echo "$next_file" | sed 's/\//\n\//g')

    # Clear the top LINES_TO_CLEAR lines
bg_blue=$(tput setab 4)
    tput cup 0 0
    for ((i = 0; i < LINES_TO_CLEAR; i++)); do
        tput el
        tput cud1
echo "$bg_blue"
    done
    tput cup 0 0

#    # Format and print the output
#    echo "${tput0}${red}${bold}"
#    echo "[${state}] #${song_pos}/${song_total}   ${elapsed}/${duration} (${percentage}%)"
#    echo "volume: ${volume}%   repeat: ${repeat}   random: ${random}   single: ${single}   consume: ${consume}${tput0}"
#    echo
#    echo "${bold}Playing: ${blue}${title}${tput0} by ${bold}${red}${artist}${normal}"
#    echo "${bold}         ${yellow}${album}${normal}"
#    echo "${bold}${blue1}$(format_path "${file}")${normal}"
#    echo "${bold}Up next:${normal} ${blue}${next_title}${normal} by ${red}${next_artist}${tput0}"
#    echo "${bold}         ${yellow}${next_album}${tput0}"
#    echo "${blue1}$(format_path "${next_file}") ${tput0}"
#    echo
    # Print border top
    term_width=$(tput cols)
    printf "${bg_blue}${bold}"
#    printf '%*s\n' "$term_width" '─' |tr ' ' ' '
#    printf '┌%*s┐\n' "$(( term_width - 2 ))" '─' #| tr ' ' '─'
    printf '┌%*s┐' "$(( term_width - 2 ))" '' | sed 's/ /─/g'

    # Format and print the output
    echo "${tput0}${bg_blue}${bold}${black}"
    echo "  [${state}] #${song_pos}/${song_total}   $(sec2sex $elapsed)/$(sec2sex $duration) (${percentage}%)"
    echo "  volume: ${volume}%   repeat: ${repeat}   random: ${random}   single: ${single}   consume: ${consume}${tput0}"
    echo

    echo "${bg_blue}${bold}${black}  Playing: ${white}${title} - ${artist}${tput0}"
    echo "${bg_blue}${bold}           ${yellow}${album}${normal}"
    echo "${bg_blue}${bold}${blue1}$(format_path "${file}")${normal}"
    echo "${bg_blue}${bold}${black}  Up next: ${white}${next_title} - ${next_artist}${tput0}"
    echo "${bg_blue}${bold}           ${yellow}${next_album}${tput0}"
    echo "${bg_blue}${blue1}$(format_path "${next_file}") ${tput0}"

    # Print border bottom
    printf "${bg_blue}${bold}"
#    printf '%*s\n' "$term_width" '' | tr ' ' ' '
    printf '└%*s┘' "$(( term_width - 2 ))" '' | sed 's/ /─/g'
    printf "${tput0}"
#this will print out a useless playlist snippet...
#for ((i=1; i<=6; i++)); do
#    while read -r line; do
#            case "$line" in
#                file:*)
#                    next_file="${line#file: }";;
#                Album:*)
#                    next_album="${line#Album: }";;
#                Artist:*)
#                    next_artist="${line#Artist: }";;
#                Title:*)
#                    next_title="${line#Title: }";;
#            esac
#        done < <(mpdc playlistinfo\ $(( current + i )))
#  echo "$next_file"
#done

}

mpdc() {
    local command=$1
    echo -ne "$command\n" | socat - UNIX-CONNECT:"$MPDSOCK"
}


[[ "$1" == @(edit|e|-e) ]] && editscript
song_total=0
mpdc 'currentsong\nstatus'|parse_mpd_response
pllength=$(mpc status %length%)
plpos=$(mpc status %songpos%)

   while (( pllength >= 1 )); do
      mpc idle player playlist update
      mpdc 'currentsong\nstatus'|parse_mpd_response
      pllength=$(mpc status %length%)
   done

exit 0
