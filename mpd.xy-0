#!/bin/bash
. /$HOME/.config/mpd-local.conf
MPDPASS="$mpdpass"  # "$(cat ~/.config/mpdpass)"
#servername=        # [—redacted—]
server="$mpdhost"   # "192.168.1.2"
#mpdport=           # [—redacted—]
scriptname=$(realpath "$0")
red=$(tput setaf 1)
green=$(tput setaf 2)
yellow=$(tput setaf 3)
blue=$(tput setaf 4)
magenta=$(tput setaf 5)
cyan=$(tput setaf 6)
white=$(tput setaf 7)
bold="$(tput bold)"
tput0=$(tput sgr0) # reset color

lines=$(tput lines 2> /dev/null) || lines=$(tput -T xterm-256color lines)

export TERM=xterm-256color

editscript(){
  local script path; script="${scriptname##*/}"; path="${scriptname%/*}"; swp="$path/.$script.swp"
     if [[ ! -e "$swp" ]]; then printf "\n\n%s\n\n" "$swp"; (/usr/bin/nano "$scriptname"); exit
     else printf "\n%s is already being edited.\n%s exists; try fg or look in another window.\n" "$scriptname" "$swp"; exit;
  fi; }

pause(){ read -p "$*" ; }

searchfn(){
  local i n mpccommand="playlist"
  [[ "$1" = listall ]] && mpccommand="listall"
  [[ "$1" = current ]] && mpccommand="current"
  # Define colors using tput
  red=$(tput setaf 1)
  green=$(tput setaf 2)
  yellow=$(tput setaf 3)
  blue=$(tput setaf 4)
  magenta=$(tput setaf 5)
  cyan=$(tput setaf 6)
  white=$(tput setaf 7)
  bold="$(tput bold)"
  tput0=$(tput sgr0) # reset color


sex2sec(){
  local time="$1";
#  [[ ! "$time" =~ [[:digit:]]{2}:[[:digit:]]{2}:[[:digit:]]{2} ]] && time='00:00:00' #&& pause "${time@A}"
  [[ ! "$time" =~ [[:digit:]]{1,2}:[[:digit:]]{2} ]] && time='00:00' #&& pause "${time@A}"
#  local hours=$(echo "$time" | awk -F: '{print $1}'); # pause "$hours"
  local minutes=$(echo "$time" | awk -F: '{print $1}'); # pause "$minutes"
  local seconds=$(echo "$time" | awk -F: '{print $2}'); # pause "$seconds"
  local total_seconds=$(( ( 10#$minutes * 60) + 10#$seconds ));
# pause "no sec $(local total_seconds=$(( (10#$hours * 3600) + (10#$minutes * 60) )) )"
#  pause "no min $(local total_seconds=$(( (10#$hours * 3600) + (10#$seconds) )) )"
#  pause "no hours $(local total_seconds=$(( (10#$minutes * 60) + (10#$seconds) )) )"
  echo "$total_seconds" ;  }
##--> sexagesimal_to_sec() <--##################################################################


searchfn_backup(){
  red="$(tput setaf 1)"
  green='\033[0;32m'
  yellow='\033[0;33m'
  blue='\033[0;34m'
  magenta='\033[0;35m'
  cyan='\033[0;36m'
  white='\033[0m' # No Color

      readarray -t playlistarray < <(\mpc ${REMOTE:-} playlist -f \(%position%\)~%artist%~%album%~\(%track%\)~%title%~\(%time%\)|grep -i --color=always "$query"|
         { printf '%s(-POS-)~%sArtist~%sAlbum~%s(%s#%s)~%sTitle%s~(mm:ss)\n' "${blue}" "${green}" "${cyan}" "${white}" "${magenta}" "${white}" "${yellow}" "${white}"; \grep \($(\mpc ${REMOTE:-} current -f %position%)\) -m1 -C$(("$lines"/3)) ; } |
         column -s "~" -o " | " --table | \grep --color=always -e '' -e ".*$(mpc ${REMOTE:-} -f %position% current).*")
      n="${#playlistarray[@]}"
      printf 'Hits: %s\n' "$n"

#      printf '$((lines-lines/10-1))=%s' $((lines-lines/10-1))
      printf 'Lines: %s; Hits: %s\n\n' $((lines-lines/10-1)) "$n"
#     i=$(gum choose --header.bold "${playlistarray[@]:1:$n}" --cursor.italic --height=$(("$lines"/1)) --header="${playlistarray[0]}" --header.padding="0 2")
pause "${playlistarray[@]}"
      i=$(gum choose --header.bold "${playlistarray[@]:1:$n}" --cursor.italic --height=40 --header="${playlistarray[0]}" --header.padding="0 2")
      (( n == 0 )) && printf 'Exiting.\n' && exit 1
      selection="$i"; i="${i%%\)*}"; i="${i#*\(}"
      $(pause "Play $selection, Y/n? ") && \mpc ${REMOTE:-} play "$i"
}

confirm() {
    read -p "$1" -n 1 -r;
    echo;
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        return 0;
    else
        return 1;
    fi
}

remotefn() {
  [[ "$(uname -n)" != "$servername" ]] && REMOTE="-h $server"
}


title(){
  artist="$(mpc current -f %artist%)"
  album="$(mpc current -f %album%)"
  title="$(mpc current -f %title%)"
  printf "\n\033[0mArtist: %s\nAlbum : %s\nTitle : %s\n" "$artist" "$album" "$title"
  mpc current -f "%file%"|awk -F / -v OFS=/ '{$1="\033[1;33m" $1 "\033[0m"; $NF="\033[1;34m" $NF "\033[0m"; print}'
# mpc current -f "%title% on %album% by %artist%\n%file%"
  printf '\n'
  mpc queued -f "%file%"|awk -F / -v OFS=/ '{$1="Up next: \033[1;33m" $1 "\033[0m"; $NF="\033[1;34m" $NF "\033[0m"; print}'
  printf '\n'
}

reverse_path() {
  local path="$1"
  echo "$path" | awk -F'/' '{for(i=NF; i>1; i--) printf("%s/", $i); printf("%s\n", $1)}'
}
