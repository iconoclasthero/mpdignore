#!/bin/bash
## probably should source confirm up here.  --> confirm's being used as a script from /usr/local//bin

. mpdignore.functions

shopt -s extglob nullglob

pidfile='/tmp/mpdlinger.pid'
cmdfile='/tmp/mpdlinger.cmd'
countfile='/tmp/mpdlinger.count'

#verbose=1

{ (( verbose )) || [[ "$1" != --exec ]] ; } && printf '%s has started.\n' "$0"
(( verbose )) && printf '\n           0 = %s\n   prevlimit = %s\n  blocklimit = %s\n       limit = %s\n       count = %s\n          $* = %s\n\n' "$0" "$prevlimit" "$blocklimit" "$limit" "$count" "$*"

# Signal traps
## If you want the variables like $count and $(...) to be evaluated when the trap is triggered, not when it's defined, you should use single quotes.
trap sigint SIGINT
trap '[[ -f "$countfile" ]] && count=$(< "$countfile"); { (( verbose )) && echo "Count updated to: $count"; }' USR1
#trap 'pkill mpc; pkill -g $mpdlingerpid lolcat; ipchandler' USR2
#trap 'pkill mpc; pkill -g $pgid lolcat; ipchandler' USR2
trap '
  [[ ! "$pgid" ]] && pgid=$(ps -o pgid= -p "$mpdlingerpid" | tr -d " ")
  pkill -g "$pgid" mpc
  pkill -g "$pgid" lolcat
  ipchandler
' USR2


startupcheck(){
  (( verbose )) && printf 'In %s.\n' "${FUNCNAME[0]}"
  readarray -t pids < <(pgrep mpdlinger)
  for i in "${!pids[@]}"; do
    [[ "$(ps -p "${pids[i]}" -o command --no-header)" = *\ --edit* ]] && unset 'pids[i]'
  done

## this compacts the array in the event that something was removed above:

  pids=("${pids[@]}")
  (( verbose )) && printf '${pids[@]} = %s\n' "${pids[@]}"
  (( verbose )) && printf '$mpdlingerpid = %s\n' "$mpdlingerpid"
  (( verbose )) && printf 'ps -p %s = %s\n' "$mpdlingerpid" "$(ps -p $mpdlingerpid)"

  if (( mpdlingerpid )) && ps -p "$mpdlingerpid" >/dev/null && screenpid="$(screen -ls|\grep -m1 mpdlinger)"; then
    printf '\nAn instance of mpdlinger is already running in a screen process:\n%s\n' "$screenpid"
    printf '\nAttempting to resume screen...\n\n'
    exec screen -r "$(awk '{print $1}' <<< "$screenpid")"
    printf 'Unable to reattach to the screen that mpdlinger is running on.\n'
    confirm -Y 'Try to reattach with "screen -x" to attemt attaching to a non-detatched screen?' &&
      exec screen -r "$(awk '{print $1}' <<< "$screenpid")"
    printf 'Reattachment to screen aborted or failed.\nExiting (exit 1)\n.'
    exit 1

## this elif is probably unnecessary and if there's no use for it, it should be removed...

  elif (( mpdlingerpid )) && ps -p "$mpdlingerpid" >/dev/null; then
    [[ "$(ps -o stat= -p "$mpdlingerpid")" = "S" ]] && background=1
    printf 'An instance of mpdlinger is already running (not in a named screen process):\n'
    ! (( background )) && printf 'You will need to chase it down in another window or kill it (pid=%s).\nExiting (exit 1)\n.' "$mpdlingerpid"
    (( background )) && printf 'You will need to chase it down somewhere in the background or kill it (pid=%s).\nExiting (exit 1)\n.' "$mpdlingerpid"
    exit 1
  elif (( "${#pids[@]}" > 1 )); then
    printf 'There is more than one instance of mpdlinger running:\n'
    read -rp "$(pgrep mpdlinger -a)"
  else
    mpdlingerpid="$$"
    printf %s\\n "$mpdlingerpid" > "$pidfile"
 #   [[ -f "$cmdfile" ]] && rm "$cmdfile"
  fi

 (( verbose )) && printf 'Leaving %s...' "${FUNCNAME[0]}"
}
##--> startupcheck() <--#######################################################################

ipchandler(){
  local cmd
  (( verbose )) && printf '\nIn "ipchandler()".\nContents of %s: "%s"\n\n' "$cmdfile" "$(< "$cmdfile")"
  cmd="$(head -n1 "$cmdfile" 2>/dev/null)"
  > "$cmdfile" # clear command after reading to local $cmd
  [[ ! "$pgid" ]] && pgid=$(ps -o pgid= -p "$mpdlingerpid" | tr -d " ")
  pkill -g "$pgid" lolcat
  case "$cmd" in
    pause)
      paused=1
      echo "Paused via CLI"
      exec mpdlinger --exec -p -c"$count" -l"$limit"
      ;;
    resume)
      unset paused
      echo "Resumed via CLI"
      exec mpdlinger --exec -c"$count" -l"$limit"
      ;;
    quit)
      cleanupexit
      ;;
    skip)
      echo "Skipping song..."
      if (( count < limit )); then
        next >/dev/null
        (( count++ ))
      else
        mpcp -q random on
        next >/dev/null
        mpcp -q random off
        count=1
      fi
      (( verbose )) && pause "mpclinger --exec -c$count"
      exec mpdlinger --exec -c"$count"
      ;;
    next)
      mpcp -q random on
      (( verbose )) && printf "read -rp: pids[0]: ${pids[0]}; mpdlingerpid: $mpdlingerpid\n"
      next >/dev/null
      mpcp -q random off
      unset blocklimit
##    exec mpdlinger --exec
## i think i want to pass the prevlimit if it exists when I skip if
## blocklimit's on and in the event that i'm not running with limit=default
      (( verbose )) && printf 'ipchander()\nnext)\nprevlimit = %s\n    limit = %s\nblocklimit = %s\n' "$prevlimit" "$limit" "$blocklimit"
      (( blocklimit )) && limit="$prevlimit"
#      exec mpdlinger --exec -l"${prevlimit:-$limit}"
      exec mpdlinger --exec -l"$limit"
      ;;
    verbose)
      exec env verbose=1 mpdlinger --exec -c"$count" -l"$limit"
      ;;
    limit\ *)
      limit="${cmd#limit }"
      echo "Limit set to $limit via CLI"
      exec env verbose=1 mpdlinger --exec -c"$count" -l"$limit"
      ;;
    count\ *)
      count="${cmd#count }"
      echo "Count set to $count via CLI"
      exec env verbose=1 mpdlinger --exec -c"$count" -l"$limit"
      ;;
    blocklimit\ *)
      blocklimit="${cmd#blocklimit }"
      prevlimit="${prevlimit:-$limit}"
      export blocklimit prevlimit
      printf 'Block limit set to %s for one block via CLI.\n' "$blocklimit"
      exec env verbose=1 blocklimit="$blocklimit" limit="$blocklimit" count="$count" prevlimit="$prevlimit" mpdlinger --exec -c"$count" -l"$blocklimit"
      ;;
    *)
      # Default to legacy behavior if no command found or unknown
      read -rp "ipchandler() fallback.  limit=$limit blocklimit=$blocklimit count=$count"
      exec mpdlinger --exec -l"$limit" -c"$count"
      ;;
  esac
}
##--> ipchandler() <--###########################################################################



pauseloop(){
  pauseout(){
    . <(mpd-current.py)
    printf '%s\n%s \n%s \n%s \n \n%s\n ' \
           "$(toilet -tf "$font1" "$1")" \
           "$(toilet -tf "$font1" "$artist / $title")" \
           "$(toilet -tf "$font1" "$album:")" \
           "$(toilet -tf "$font1" "${blocklimit:+Blocklimit: }$count/$limit")" \
           "$(mpctitle)" |
      "${lolargs[@]}"&
  }

  if [[ "$1" = --out ]]; then
    clear -x
    mpcp -q random off
    pauseout 'mpdlinger will pause changing artists...'
  elif [[ "$1" = --in ]]; then
    toilet -tf "$font1" "Resuming rock blocks! $limit in a row!"|"${lolargs[@]}"
    sleep 2
    unset paused
    exec mpdlinger --exec -c"$count" --off -l"$limit"
  else
    while output=( $(\mpc idle playlist player) ) && (( paused )); do
      if [[ "${output[@]}" = playlist\ player ]]; then
        clear -x
        ((count++))
        pauseout 'Paused...'
      fi
    done
  fi
}
##--> pauseloop() <--###########################################################################

sigint(){
  # Kill only child processes in the same process group
  [[ ! "$pgid" ]] && pgid=$(ps -o pgid= -p "$mpdlingerpid" | tr -d " ")
  pkill -g "$pgid" lolcat
#  printf \\b\\b%s\\n . . .
  printf '\r\033[K'
  if (( paused )); then
    pauseloop --in
  else
    mainmenu
  fi
}
##--> sigint() <--###############################################################################

mainmenu(){
  while true; do
    option=$(gum choose \
      --header="Multi-level Menu" \
      --height=10 \
      --item.foreground="33" \
      --cursor.foreground=214 \
      "Next block" \
      "Playlist" \
      "Change limit" \
      "Change current block limit" \
      "Pause" \
      "Log" \
      "Skip" \
      "Quit")

    case $option in
      "Next block")
#        mpcp -q random on
#        next >/dev/null
#        mpcp -q random off
#        exec mpdlinger --exec
        printf 'next' > "$cmdfile"
        ipchandler
        ;;
      "Skip")
        printf 'skip' > "$cmdfile"
        ipchandler
#        skipsong
        ;;
      "Playlist")
        playlistmenu
        ;;
      "Change limit")
#        changelimit
        read -p "Enter new limit: " limit &&
          printf "$limit" > /tmp/mpdlinger.cmd
        printf 'Limit changed to %s.\n' "limit $limit"
        ipchandler
        ;;
      "Change current block limit")
        printf 'This has not been implemented yet?\n'
        read -p "Change limit for current block to: " blocklimit &&
          printf blocklimit\ %s\\n "$blocklimit" > /tmp/mpdlinger.cmd
        printf 'Current block limit changed to %s.\n' "blocklimit $blocklimit"
        ipchandler
        ;;
      "Log")
        grep \:\ player\: /var/log/mpd/mpd.log|tail -n 40
        pause "Continue? "
        ;;
      "Pause")
        pauseloop --out
        exec mpdlinger --exec -p -c"$count" -l"$limit"
        ;;
      "Quit")
        cleanupexit
        ;;
      "")
        exec mpdlinger --exec -c"$count" -l"$limit"
        ;;
      *)
        echo "Invalid option."
        ;;
    esac
  done
}
##--> mainmenu() <--############################################################################



showhelp(){
  cat <<EOF
Usage: $0 [options]

$(hr2 "CLI IPC Wrapper")
Usage:
  mpdlinger pause              Suspends mpdlinger function
  mpdlinger resume             Resumes mpdlinger function
  mpdlinger next               Moves to the next block of songs
  mpdlinger skip               Skips currently-playing song?
  mpdlinger limit <num>        Changes the global limit to <num>
  mpdlinger blocklimit <num>   Changes the limit for current block to <num>
  mpdlinger quit               Should terminate any current mpdlinger daemons
  NOT WORKING:
  mpdlinger count <num>        Updates the count of played songs for current block to <num>

$(hr2 "CLI Launch Flags")
NB: These are probably exclusively for internal control at this point.

Options:
  -p              Pause the process.
  --off, --on     Initialize with a random value, setting the state to 'off' or 'on'.
  -c <num>        Set the count to <num>. Error if no numerical argument after -c.
  -l <num>        Set the limit to <num>. Error if no numerical argument after -l.
  -b <num>        Set the current block limit to <num>. Error if no numerical argument after -b.

Description:
  - The -p flag pauses the process.
  - The --off or --on flags initialize a random state.
  - The -c|-l|-b flags set the count|limit|blocklimit, respectively, to the specified number.

Error:
  - If -c|-l|-b are used without a valid number, an error message is displayed.

Examples:
  $(basename $0) -p                  Pauses the process.
  $(basename $0) --on                Initializes with the 'on' state.
  $(basename $0) -c 5                Sets the count to 5.
  $(basename $0) -l 10               Sets the limit to 10.
  $(basename $0) -b 6                Sets the limit for the current block to 6.
EOF
}
##--> showhelp() <--############################################################################


playlistmenu(){
  while true; do
    suboption=$(gum choose \
      --header="Playlist Menu" \
      --height=8 \
      --item.foreground="33" \
      --cursor.foreground=214 \
      "Current position" \
      "Search" \
      "Back")

    case "$suboption" in
      "Current position")
        playlist
        exec mpdlinger --exec
        ;;
      "Search")
        searchplaylist
        ;;
      ""|"Back")
        return  # Go back to the main menu
        ;;
      *)
        echo "Invalid option."
        ;;
    esac
  done
}
##--> playlistmenu() <--#######################################################################

searchplaylist(){
  term="$(gum input --placeholder=" Search term..." --prompt "Search playlist: " --cursor.foreground=214 --header.foreground=33 --prompt.foreground=33)"
  subsubopt=$(gum choose \
    --header="Search Options" \
    --height=6 \
    --item.foreground="33" \
    --cursor.foreground=214 \
    "Current playlist" \
    "Entire library" \
    "Back")

  case "$subsubopt" in
    "Current playlist")
      playlist "$term"
      exec mpdlinger --exec
      ;;
    "Entire library")
      playlist -A "$term"
      exec mpdlinger --exec
      ;;
    ""|"Back")
      return  # Go back to the previous menu
      ;;
    *)
      echo "Invalid option."
      ;;
  esac
}
##--> searchplaylist() <--#######################################################################

changelimit(){
  read -p "Enter new limit: " limit
  echo "Limit changed to $limit"
  exec mpdlinger --exec -c"$count" -l"$limit"
}
##--> changelimit() <--#######################################################################

cleanupexit(){
  echo "Exiting..."
  rm /tmp/mpdlinger "$pidfile" 2>/dev/null
  mpcp random on | grep --color=always -B2 'random\:\ on'
  exit 130
}
##--> cleanupexit() <--#######################################################################

#getpids(){
#  (( verbose )) && printf 'Entered getpids()...\n'
##  pids=( $(ps aux | grep '[m]pdlinger' |grep -Ev nano\|mpdlinger\ e | awk '{print $2}') )
#  readarray -t pids < <(pgrep mpdlinger)
#
#  for i in "${!pids[@]}"; do
#    [[ "$(ps -p "${pids[i]}" -o command --no-header)" = *\ --edit* ]] && unset 'pids[i]'
#  done
#  pids=("${pids[@]}")
#
#  (( verbose )) && { printf 'After filtering and compacting ${pids[@]}:\n%s\n' "$(printf ' %s\n' "${pids[@]}")"; }
#  (( verbose )) && printf 'mpdlingerpid = %s\n' "$mpdlingerpid"
#
#  (( verbose )) && printf 'Original pgid: %s\n' "$pgid"
#  pgid=$(ps -o pgid= -p $$ | tr -d ' ')
#  (( verbose )) && printf 'Updated pgid: %s\n' "$pgid"
#
### I don't think this is doing anything in this script.
### 1. otherpids isn't being used anywhere
### 2. what it appears to be doing won't work since it's looking for mpdlinger being edited... which I'm doing above
### 3. the pgrep command above doesn't pull up the screen job with mpdlinger in it.
#
#  readarray -t otherpids < <(pgrep -a mpdlinger| \grep -Ev "^$$|^$(pgrep -P $$)|--edit") #`|mpdlinger e` is probably unnecessary
#  (( verbose )) && printf '${otherpids[@]}: %s\n' "${otherpids[@]}"
#  (( verbose )) && printf 'Leaving getpids()...\n'
#
#}
###--> getpids() <--############################################################################


#═══════▶ MAIN CODE ◀════════════════════════════════════════════════════════

[[ -f "$pidfile" ]] &&
   { mpdlingerpid="$(< "$pidfile")"; pgid="$(ps -o pgid= -p "$mpdlingerpid" | tr -d ' ')"; }

if [[ ! -f "$pidfile" ]]; then
  (( verbose )) && printf 'pid of this process: $$ = %s\n' "$$"
  readarray -t pgrepout < <(pgrep mpdlinger -a | grep -Ev -- "$$|--edit")
  pgid2=$(ps -o pgid= -p $$ | tr -d ' ')

  (( verbose )) && printf %s\\n "$pgid2"

  for i in "${pgrepout[@]}"; do
    unset pidpgid
    pid="${i%% *}"  # pid is first field before first space
    pidpgid=$(ps -o pgid= -p "$pid" | tr -d ' ')
    (( verbose )) && printf 'pid=%s  pidpgid=%s  ourpgid=%s  cmd=%s\n' "$pid" "$pidpgid" "$pgid2" "$i"
    if [[ "$pidpgid" && "$pidpgid" != "$pgid2" ]]; then
      pgreplines+=("$i")
    fi
  done


  (( verbose )) && { printf -- --\\n; printf %s\\n "${pgreplines[@]}"; printf -- --\\n; }

  if (( ${#pgreplines[@]} )); then
    printf '\n[%sWARN%s] A pid for mpdlinger was identified without a corresponding %s!\n[%sWARN%s] This indicates that the pidfile has been somehow misplaced...\n\nOutput of '\''%spgrep mpdlinger -a|grep -Ev -- "$$|--edit"%s'\'':\n' "$yellow" "$tput0" "$pidfile" "$yellow" "$tput0" "$blue" "$tput0"
    printf %s "$blue"
    if (( ${#pgreplines[@]} > 1 )); then
      mpdlingerpid="$(printf '%s\n' "${pgreplines[@]}" | gum choose)"
      mpdlingerpid="${mpdlingerpid%% *}"
    else
      printf %s\\n "${pgreplines[0]}"
      mpdlingerpid="${pgreplines[0]%% *}"
    fi
    printf %s "$tput0"

    printf \\n
    confirm -Y "${red}Write pid $mpdlingerpid to $pidfile?${tput0}" &&
            { printf '%s\n' "$mpdlingerpid" > "$pidfile"
              pgid="$(ps -o pgid= -p "$mpdlingerpid" | tr -d ' ')"; } ||
            { printf '\nFailed to determine a pid for the daemon. Investigate. (exit 1)\n\n'; exit 1; }

#    while read -r i; do [[ "$i" = *.mpdlinger* ]] && screenls="$i"; done < <(screen -ls|awk '{print $1}')
#    [[ "$screenls" ]] && { printf 'Calling sc...\n'; sc; }
#    printf 'I think we should exit here. (exit 0)\n'
#    exit 0
   fi
fi


#fonts are in /usr/share/figlet
font1=future
font2=pagga
font2="$font1"
#filter=metal

[[ "$STY" ]] && unset COLORTERM
lolargs=(lolcat)
[[ "$STY" ]] && lolargs+=(-ap 2) || lolargs+=(-tap 2)
##  -F, --freq=<f>        Rainbow frequency (default: 0.1)
##  -d, --duration=<i>    Animation duration (default: 12)
##  -s, --speed=<f>       Animation speed (default: 20.0)
lolargs+=(-d 06) #lolargs+=(-d 08)
lolargs+=(-s 13) #lolargs+=(-s 15)
lolargs+=(-F 0.075)

ipcargs=(pause resume next skip quit limit count blocklimit verbose)
ipc1args=(pause resume next skip quit)
ipc2args=(limit count blocklimit)

[[ "$1" != @(--edit|--exec|--help|-h|help) && " ${ipcargs[*]} " != *" $1 "* ]] && startupcheck

#if [[ "$1" =~ ^(pause|resume|quit|limit|count|blocklimit|next|skip)$ ]]; then
if [[ " ${ipcargs[*]} " = *" $1 "* ]]; then
  ipccmd="$1"
  shift
  [[ "$1" =~ ^[0-9]+$ ]] && ipcval="$1" && shift

  if (( $# )); then
    printf 'The IPC wrapper accepts EXACTLY ONE of the following cli arguments:\n%s\nThe following will be ignored:\n %s\n' "$(IFS=\|; printf '%s' "${ipcargs[*]}")" "$*"
    set --
  elif [[ " ${ipc1args[*]} " = *" $ipccmd " ]] && [[ "$ipcval" ]]; then
    printf 'These IPC wrapper commands do not accept numeric arguments:\n%s\nThe following will be ignored:\n %s\n' "$(IFS=\|; printf '%s' "${ipc1args[*]}")" "$ipcval"
    unset ipcval
  elif [[ " ${ipc2args[*]} " = *" $ipccmd " ]] && [[ ! "$ipcval" ]]; then
    printf 'These IPC wrapper commands require a numeric argument:\n%s' "$(IFS=\|; printf '%s' "${ipc2args[*]}")"
    exit 1
  fi

  printf '%s%s\n' "$ipccmd" "${ipcval:+ $ipcval}" > "$cmdfile"

  (( verbose )) && printf 'kill -USR2 %s\n' "$mpdlingerpid"
  [[ ! "$pgid" ]] && pgid=$(ps -o pgid= -p "$mpdlingerpid" | tr -d ' ')
  kill -USR2 "$mpdlingerpid"
  pkill -g "$pgid" mpc
  pkill -g "$pgid" lolcat
  [[ "$ipccmd" = next ]] && mpctitle
  exit 0
fi
#---------------------------------------------------#

## i really have no idea if any of these should be here...
## what are they doing when this shit loops or execs?
## do i still need getpids()?  should I even be using it if I have these defined at the top?
## speaking of which, I probably ought to move the "top" stuff down here...
## really, how are these not fucking things up?  because they're all before the signal processing?

unset initrand  #probably can remove
unset paused    #probably can remove
#limit=4
limit="${limit:-4}" #probably need to define a default limit somewhere.  should i use prevlimit though?
unset current  #probably can remove
count=1        #since i'm not zero indexed, i need to fix that before removing this.
#getpids        #need to decide if this is redudnant/problematic
               #it isn't, only insofar as NOTHING in the script uses it anymore.

while (( "$#" > 0 )); do
  if [[ "$1" = @(-s|--screen@(|ed)) ]]; then
    screenname="mpdlinger-$(date -Im)"
    shift
  elif [[ "$1" = --exec ]]; then
    (( verbose )) && printf 'mpdlinger called with --exec option for internal control.\n'
    execoption=1
    shift
 elif [[ "$1" = -p ]]; then
    args+=("$1")
    paused=1
    shift
  elif [[ "$1" =~ ^(-h|--help|help)$ ]]; then
    showhelp
    exit 0
  elif [[ "$1" =~ (--off|--on) ]]; then
    args+=("$1")
    initrand="${1#--}"
    shift
  elif [[ "$1" =~ ^-c([0-9]+)$ || "$1" = -c ]]; then
#    if [[ "$1" =~ ^-c([0-9]+)$ ]]; then
    if [[ "${BASH_REMATCH[1]}" ]]; then
      args+=("$1")
      count="${BASH_REMATCH[1]}"
      shift
    elif [[ "$1" = -c ]]; then
      args+=("$1" "$2")
      if [[ "$2" =~ ^[0-9]+$ ]]; then
        count="$2"
        shift 2
      else
        echo "Error: -c requires a numerical argument."
        exit 1
      fi
    fi
#    if [[ "$mpdlingerpid" ]]; then
#      echo "$count" > "$countfile"
#      export count
#      kill -USR1 "$mpdlingerpid"
#      (( verbose )) && echo "count: $count"
#    fi
  elif [[ "$1" =~ ^-l([0-9]+)$ || "$1" = -l ]]; then
#    if [[ "$1" =~ ^-l([0-9]+)$ ]]; then
    if [[ "${BASH_REMATCH[1]}" ]]; then
      args+=("$1")
      limit="${BASH_REMATCH[1]}"
      shift
    elif [[ "$1" = -l ]]; then
      args+=("$1" "$2")
      if [[ "$2" =~ ^[0-9]+$ ]]; then
        limit="$2"
        shift 2
      else
        printf 'Error: -l requires a numerical argument.\n'
        exit 1
      fi
    fi
  elif [[ "$1" =~ ^-b[0-9]+$ || "$1" = -b ]]; then
#    if [[ "$1" =~ ^-b([0-9]+)$ ]]; then
    if [[ "${BASH_REMATCH[1]}" ]]; then
      args+=("$1")
      blocklimit="${BASH_REMATCH[1]}"
      shift
    elif [[ "$1" = -b ]]; then
      args+=("$1" "$2")
      if [[ "$2" =~ ^[0-9]+$ ]]; then
        blocklimit="$2"
        shift 2
      else
        printf 'Error: -b requires a numerical argument.\n'
        exit 1
      fi
    fi
  else
    echo "Unknown option: $1"
    shift
  fi
done


if [[ "$screenname" ]]; then
  (( verbose )) && pause "$screenname"
  hr2 "$bold Calling mpdlinger in GNU screen $tput0"
  [[ -d "$musicdir" ]] && cd "$musicdir" || cd "$HOME" || cd /
  printf \\n\\n
  screen -dmS "${screenname:0:26}" mpdlinger "${args[@]}"
  screen -ls
  exit
fi

. <(mpd-current.py)

! [[ "$current" ]] && current="$song_id"

#! [[ "$current" ]] && . <(mpd-current.py) && current="$song_id"

# handle the -p / paused entry state:
if (( paused )); then
#  echo "pauseloop"|"${lolargs[@]}"
  pauseloop
fi


# check to make sure random is off when $0 starts:
if [[ "$initrand" = off ]] || { [[ "$random" = '✅' ]] && (( count < limit )); }; then
  echo "[WARN] Turning random off."
  mpcp -q random off
elif [[ "$initrand" = on ]] || { [[ "$random" = '❌' ]] && (( count >= limit )); }; then
  echo "[WARN] Turning random on."
  mpcp -q random on
fi


clear -x
printf '%s \n%s \n%s \n \n%s\n%s\n' \
       "$(toilet -tf "$font1" "$artist / $title")" \
       "$(toilet -tf "$font1" "$album:")" \
       "$(toilet -tf "$font1" "${blocklimit:+Blocklimit: }$count/$limit")" \
       "$(mpctitle)" \
       "$(date)" |
   "${lolargs[@]}" &

# oneline this with: printf '%s \n%s \n%s \n \n%s\n ' "$(toilet -tf "$font1" "$artist")" "$(toilet -tf "$font1" "$album:")" "$(toilet -tf "$font1" "$count/$limit")" "$(mpctitle)"



while output=( $(\mpc idle playlist player) ); do
  if [[ "${output[@]}" = playlist\ player ]]; then
    if (( paused )); then
      echo "mpdlinger paused. Waiting to be resumed..."
      pauseloop
    #  sleep 1
    #  continue
    fi

    . <(mpd-current.py)

    if (( current != song_id )); then
      current="$song_id"
      ((count++))
    fi
    wait
    clear -x
    randomst=$(( count >= limit ? 1 : 0 ))
    (( randomst )) && randomst='on' || randomst='off'
    printf '%s \n%s \n%s \n \n%s\n%s\n' \
           "$(toilet -tf "$font1" "$artist / $title")" \
           "$(toilet -tf "$font1" "$album:")" \
           "$(toilet -tf "$font1" "${blocklimit:+Blocklimit: }$count/$limit")" \
           "$(mpctitle random $randomst)" \
           "$(date)" |
      "${lolargs[@]}" &
    if (( count >= "$limit" )); then
      count=0
      if (( blocklimit )); then
        limit="$prevlimit"
        unset blocklimit
        printf 'Temporary block limit reached; restoring limit to %s.\nEnjoy the next rock block coming up right after %s!\n' "$limit" "$title"
      fi
    fi
  fi
done



#Character	Name	Unicode	Decimal
#═	Box Drawings Double Horizontal	U+2550	9552
#╤	Box Drawings Down Double and Horizontal Single	U+2564	9572
#
#Arrow Characters
#Character	Name	Unicode	Decimal
#←	Left Arrow	U+2190	8592
#→	Right Arrow	U+2192	8594
#⇐	Left Double Arrow	U+21D0	8656
#⇒	Right Double Arrow	U+21D2	8658
#▶	Black Right-Pointing Triangle	U+25B6	9654
#◀	Black Left-Pointing Triangle	U+25C0	9664


